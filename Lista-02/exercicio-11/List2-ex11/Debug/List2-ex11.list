
List2-ex11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d20  08001d20  00011d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08001d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001d34  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047b4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001153  00000000  00000000  000247e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00025940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00025e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001971d  00000000  00000000  000262d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000564e  00000000  00000000  0003f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5127  00000000  00000000  00045043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea16a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000105c  00000000  00000000  000ea1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001c88 	.word	0x08001c88

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001c88 	.word	0x08001c88

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fcbc 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 fb50 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fbac 	bl	8000984 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 bit1 = HAL_GPIO_ReadPin(PC3_GPIO_Port, PC3_Pin);
 800022c:	4bf5      	ldr	r3, [pc, #980]	; (8000604 <main+0x3e8>)
 800022e:	2108      	movs	r1, #8
 8000230:	0018      	movs	r0, r3
 8000232:	f000 ff93 	bl	800115c <HAL_GPIO_ReadPin>
 8000236:	0003      	movs	r3, r0
 8000238:	001a      	movs	r2, r3
 800023a:	4bf3      	ldr	r3, [pc, #972]	; (8000608 <main+0x3ec>)
 800023c:	601a      	str	r2, [r3, #0]
	 bit2 = HAL_GPIO_ReadPin(PC2_GPIO_Port, PC2_Pin);
 800023e:	4bf1      	ldr	r3, [pc, #964]	; (8000604 <main+0x3e8>)
 8000240:	2104      	movs	r1, #4
 8000242:	0018      	movs	r0, r3
 8000244:	f000 ff8a 	bl	800115c <HAL_GPIO_ReadPin>
 8000248:	0003      	movs	r3, r0
 800024a:	001a      	movs	r2, r3
 800024c:	4bef      	ldr	r3, [pc, #956]	; (800060c <main+0x3f0>)
 800024e:	601a      	str	r2, [r3, #0]
	 bit3 = HAL_GPIO_ReadPin(PF1_GPIO_Port, PF1_Pin);
 8000250:	4bef      	ldr	r3, [pc, #956]	; (8000610 <main+0x3f4>)
 8000252:	2102      	movs	r1, #2
 8000254:	0018      	movs	r0, r3
 8000256:	f000 ff81 	bl	800115c <HAL_GPIO_ReadPin>
 800025a:	0003      	movs	r3, r0
 800025c:	001a      	movs	r2, r3
 800025e:	4bed      	ldr	r3, [pc, #948]	; (8000614 <main+0x3f8>)
 8000260:	601a      	str	r2, [r3, #0]
	 bit4 = HAL_GPIO_ReadPin(PF0_GPIO_Port, PF0_Pin);
 8000262:	4beb      	ldr	r3, [pc, #940]	; (8000610 <main+0x3f4>)
 8000264:	2101      	movs	r1, #1
 8000266:	0018      	movs	r0, r3
 8000268:	f000 ff78 	bl	800115c <HAL_GPIO_ReadPin>
 800026c:	0003      	movs	r3, r0
 800026e:	001a      	movs	r2, r3
 8000270:	4be9      	ldr	r3, [pc, #932]	; (8000618 <main+0x3fc>)
 8000272:	601a      	str	r2, [r3, #0]

	 HAL_Delay(1500);
 8000274:	4be9      	ldr	r3, [pc, #932]	; (800061c <main+0x400>)
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd16 	bl	8000ca8 <HAL_Delay>

	 result++;
 800027c:	4be8      	ldr	r3, [pc, #928]	; (8000620 <main+0x404>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	4be7      	ldr	r3, [pc, #924]	; (8000620 <main+0x404>)
 8000284:	601a      	str	r2, [r3, #0]

	 if(result == 15)
 8000286:	4be6      	ldr	r3, [pc, #920]	; (8000620 <main+0x404>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b0f      	cmp	r3, #15
 800028c:	d109      	bne.n	80002a2 <main+0x86>
		 while(result != 1){
 800028e:	e004      	b.n	800029a <main+0x7e>
			 result--;
 8000290:	4be3      	ldr	r3, [pc, #908]	; (8000620 <main+0x404>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1e5a      	subs	r2, r3, #1
 8000296:	4be2      	ldr	r3, [pc, #904]	; (8000620 <main+0x404>)
 8000298:	601a      	str	r2, [r3, #0]
		 while(result != 1){
 800029a:	4be1      	ldr	r3, [pc, #900]	; (8000620 <main+0x404>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d1f6      	bne.n	8000290 <main+0x74>

		 }

	 switch(result)
 80002a2:	4bdf      	ldr	r3, [pc, #892]	; (8000620 <main+0x404>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b0f      	cmp	r3, #15
 80002a8:	d900      	bls.n	80002ac <main+0x90>
 80002aa:	e2d9      	b.n	8000860 <main+0x644>
 80002ac:	009a      	lsls	r2, r3, #2
 80002ae:	4bdd      	ldr	r3, [pc, #884]	; (8000624 <main+0x408>)
 80002b0:	18d3      	adds	r3, r2, r3
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	469f      	mov	pc, r3
	 {
		 case 1:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	48d2      	ldr	r0, [pc, #840]	; (8000604 <main+0x3e8>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	f000 ff69 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	48ce      	ldr	r0, [pc, #824]	; (8000604 <main+0x3e8>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	0019      	movs	r1, r3
 80002ce:	f000 ff62 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	015b      	lsls	r3, r3, #5
 80002d6:	48cb      	ldr	r0, [pc, #812]	; (8000604 <main+0x3e8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	0019      	movs	r1, r3
 80002dc:	f000 ff5b 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80002e0:	4bd1      	ldr	r3, [pc, #836]	; (8000628 <main+0x40c>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	2104      	movs	r1, #4
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 ff55 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	48c4      	ldr	r0, [pc, #784]	; (8000604 <main+0x3e8>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	f000 ff4e 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80002fa:	4bc2      	ldr	r3, [pc, #776]	; (8000604 <main+0x3e8>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	0018      	movs	r0, r3
 8000302:	f000 ff48 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 8000306:	4bbf      	ldr	r3, [pc, #764]	; (8000604 <main+0x3e8>)
 8000308:	2201      	movs	r2, #1
 800030a:	2110      	movs	r1, #16
 800030c:	0018      	movs	r0, r3
 800030e:	f000 ff42 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 8000312:	e2d4      	b.n	80008be <main+0x6a2>

		 case 2:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	48ba      	ldr	r0, [pc, #744]	; (8000604 <main+0x3e8>)
 800031a:	2200      	movs	r2, #0
 800031c:	0019      	movs	r1, r3
 800031e:	f000 ff3a 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	48b7      	ldr	r0, [pc, #732]	; (8000604 <main+0x3e8>)
 8000328:	2200      	movs	r2, #0
 800032a:	0019      	movs	r1, r3
 800032c:	f000 ff33 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	015b      	lsls	r3, r3, #5
 8000334:	48b3      	ldr	r0, [pc, #716]	; (8000604 <main+0x3e8>)
 8000336:	2201      	movs	r2, #1
 8000338:	0019      	movs	r1, r3
 800033a:	f000 ff2c 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800033e:	4bba      	ldr	r3, [pc, #744]	; (8000628 <main+0x40c>)
 8000340:	2201      	movs	r2, #1
 8000342:	2104      	movs	r1, #4
 8000344:	0018      	movs	r0, r3
 8000346:	f000 ff26 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	48ad      	ldr	r0, [pc, #692]	; (8000604 <main+0x3e8>)
 8000350:	2200      	movs	r2, #0
 8000352:	0019      	movs	r1, r3
 8000354:	f000 ff1f 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 8000358:	4baa      	ldr	r3, [pc, #680]	; (8000604 <main+0x3e8>)
 800035a:	2200      	movs	r2, #0
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	0018      	movs	r0, r3
 8000360:	f000 ff19 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 8000364:	4ba7      	ldr	r3, [pc, #668]	; (8000604 <main+0x3e8>)
 8000366:	2200      	movs	r2, #0
 8000368:	2110      	movs	r1, #16
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ff13 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 8000370:	e2a5      	b.n	80008be <main+0x6a2>

		 case 3:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	48a3      	ldr	r0, [pc, #652]	; (8000604 <main+0x3e8>)
 8000378:	2201      	movs	r2, #1
 800037a:	0019      	movs	r1, r3
 800037c:	f000 ff0b 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	489f      	ldr	r0, [pc, #636]	; (8000604 <main+0x3e8>)
 8000386:	2200      	movs	r2, #0
 8000388:	0019      	movs	r1, r3
 800038a:	f000 ff04 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	015b      	lsls	r3, r3, #5
 8000392:	489c      	ldr	r0, [pc, #624]	; (8000604 <main+0x3e8>)
 8000394:	2200      	movs	r2, #0
 8000396:	0019      	movs	r1, r3
 8000398:	f000 fefd 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800039c:	4ba2      	ldr	r3, [pc, #648]	; (8000628 <main+0x40c>)
 800039e:	2201      	movs	r2, #1
 80003a0:	2104      	movs	r1, #4
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fef7 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4895      	ldr	r0, [pc, #596]	; (8000604 <main+0x3e8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	0019      	movs	r1, r3
 80003b2:	f000 fef0 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80003b6:	4b93      	ldr	r3, [pc, #588]	; (8000604 <main+0x3e8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 feea 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80003c2:	4b90      	ldr	r3, [pc, #576]	; (8000604 <main+0x3e8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	2110      	movs	r1, #16
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fee4 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 80003ce:	e276      	b.n	80008be <main+0x6a2>

		 case 4:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	488b      	ldr	r0, [pc, #556]	; (8000604 <main+0x3e8>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	0019      	movs	r1, r3
 80003da:	f000 fedc 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80003de:	2380      	movs	r3, #128	; 0x80
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	4888      	ldr	r0, [pc, #544]	; (8000604 <main+0x3e8>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	f000 fed5 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	015b      	lsls	r3, r3, #5
 80003f0:	4884      	ldr	r0, [pc, #528]	; (8000604 <main+0x3e8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	0019      	movs	r1, r3
 80003f6:	f000 fece 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80003fa:	4b8b      	ldr	r3, [pc, #556]	; (8000628 <main+0x40c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	2104      	movs	r1, #4
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fec8 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	487e      	ldr	r0, [pc, #504]	; (8000604 <main+0x3e8>)
 800040c:	2201      	movs	r2, #1
 800040e:	0019      	movs	r1, r3
 8000410:	f000 fec1 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 8000414:	4b7b      	ldr	r3, [pc, #492]	; (8000604 <main+0x3e8>)
 8000416:	2200      	movs	r2, #0
 8000418:	2140      	movs	r1, #64	; 0x40
 800041a:	0018      	movs	r0, r3
 800041c:	f000 febb 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 8000420:	4b78      	ldr	r3, [pc, #480]	; (8000604 <main+0x3e8>)
 8000422:	2200      	movs	r2, #0
 8000424:	2110      	movs	r1, #16
 8000426:	0018      	movs	r0, r3
 8000428:	f000 feb5 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 800042c:	e247      	b.n	80008be <main+0x6a2>

		 case 5:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <main+0x3e8>)
 8000434:	2201      	movs	r2, #1
 8000436:	0019      	movs	r1, r3
 8000438:	f000 fead 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4870      	ldr	r0, [pc, #448]	; (8000604 <main+0x3e8>)
 8000442:	2200      	movs	r2, #0
 8000444:	0019      	movs	r1, r3
 8000446:	f000 fea6 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	015b      	lsls	r3, r3, #5
 800044e:	486d      	ldr	r0, [pc, #436]	; (8000604 <main+0x3e8>)
 8000450:	2200      	movs	r2, #0
 8000452:	0019      	movs	r1, r3
 8000454:	f000 fe9f 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000458:	4b73      	ldr	r3, [pc, #460]	; (8000628 <main+0x40c>)
 800045a:	2200      	movs	r2, #0
 800045c:	2104      	movs	r1, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fe99 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4866      	ldr	r0, [pc, #408]	; (8000604 <main+0x3e8>)
 800046a:	2200      	movs	r2, #0
 800046c:	0019      	movs	r1, r3
 800046e:	f000 fe92 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8000472:	4b64      	ldr	r3, [pc, #400]	; (8000604 <main+0x3e8>)
 8000474:	2201      	movs	r2, #1
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fe8c 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 800047e:	4b61      	ldr	r3, [pc, #388]	; (8000604 <main+0x3e8>)
 8000480:	2200      	movs	r2, #0
 8000482:	2110      	movs	r1, #16
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fe86 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 800048a:	e218      	b.n	80008be <main+0x6a2>

		 case 6:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	485c      	ldr	r0, [pc, #368]	; (8000604 <main+0x3e8>)
 8000492:	2200      	movs	r2, #0
 8000494:	0019      	movs	r1, r3
 8000496:	f000 fe7e 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <main+0x3e8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	0019      	movs	r1, r3
 80004a4:	f000 fe77 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	015b      	lsls	r3, r3, #5
 80004ac:	4855      	ldr	r0, [pc, #340]	; (8000604 <main+0x3e8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0019      	movs	r1, r3
 80004b2:	f000 fe70 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80004b6:	4b5c      	ldr	r3, [pc, #368]	; (8000628 <main+0x40c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe6a 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	484f      	ldr	r0, [pc, #316]	; (8000604 <main+0x3e8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f000 fe63 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80004d0:	4b4c      	ldr	r3, [pc, #304]	; (8000604 <main+0x3e8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 fe5d 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <main+0x3e8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	2110      	movs	r1, #16
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fe57 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 80004e8:	e1e9      	b.n	80008be <main+0x6a2>

		 case 7:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4845      	ldr	r0, [pc, #276]	; (8000604 <main+0x3e8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	0019      	movs	r1, r3
 80004f4:	f000 fe4f 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4841      	ldr	r0, [pc, #260]	; (8000604 <main+0x3e8>)
 80004fe:	2201      	movs	r2, #1
 8000500:	0019      	movs	r1, r3
 8000502:	f000 fe48 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	015b      	lsls	r3, r3, #5
 800050a:	483e      	ldr	r0, [pc, #248]	; (8000604 <main+0x3e8>)
 800050c:	2200      	movs	r2, #0
 800050e:	0019      	movs	r1, r3
 8000510:	f000 fe41 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000514:	4b44      	ldr	r3, [pc, #272]	; (8000628 <main+0x40c>)
 8000516:	2201      	movs	r2, #1
 8000518:	2104      	movs	r1, #4
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fe3b 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4837      	ldr	r0, [pc, #220]	; (8000604 <main+0x3e8>)
 8000526:	2200      	movs	r2, #0
 8000528:	0019      	movs	r1, r3
 800052a:	f000 fe34 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 800052e:	4b35      	ldr	r3, [pc, #212]	; (8000604 <main+0x3e8>)
 8000530:	2200      	movs	r2, #0
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fe2e 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 800053a:	4b32      	ldr	r3, [pc, #200]	; (8000604 <main+0x3e8>)
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fe28 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 8000546:	e1ba      	b.n	80008be <main+0x6a2>

		 case 8:
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	482d      	ldr	r0, [pc, #180]	; (8000604 <main+0x3e8>)
 800054e:	2200      	movs	r2, #0
 8000550:	0019      	movs	r1, r3
 8000552:	f000 fe20 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	482a      	ldr	r0, [pc, #168]	; (8000604 <main+0x3e8>)
 800055c:	2200      	movs	r2, #0
 800055e:	0019      	movs	r1, r3
 8000560:	f000 fe19 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	015b      	lsls	r3, r3, #5
 8000568:	4826      	ldr	r0, [pc, #152]	; (8000604 <main+0x3e8>)
 800056a:	2200      	movs	r2, #0
 800056c:	0019      	movs	r1, r3
 800056e:	f000 fe12 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0x40c>)
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fe0c 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <main+0x3e8>)
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f000 fe05 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <main+0x3e8>)
 800058e:	2200      	movs	r2, #0
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fdff 	bl	8001196 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <main+0x3e8>)
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fdf9 	bl	8001196 <HAL_GPIO_WritePin>
			 break;
 80005a4:	e18b      	b.n	80008be <main+0x6a2>

		 case 9:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x3e8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	0019      	movs	r1, r3
 80005b0:	f000 fdf1 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0x3e8>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	0019      	movs	r1, r3
 80005be:	f000 fdea 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	015b      	lsls	r3, r3, #5
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x3e8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0019      	movs	r1, r3
 80005cc:	f000 fde3 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0x40c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	2104      	movs	r1, #4
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fddd 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <main+0x3e8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	0019      	movs	r1, r3
 80005e6:	f000 fdd6 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <main+0x3e8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fdd0 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <main+0x3e8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	2110      	movs	r1, #16
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fdca 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 8000602:	e15c      	b.n	80008be <main+0x6a2>
 8000604:	50000800 	.word	0x50000800
 8000608:	2000002c 	.word	0x2000002c
 800060c:	20000034 	.word	0x20000034
 8000610:	50001400 	.word	0x50001400
 8000614:	20000030 	.word	0x20000030
 8000618:	20000038 	.word	0x20000038
 800061c:	000005dc 	.word	0x000005dc
 8000620:	20000028 	.word	0x20000028
 8000624:	08001ca0 	.word	0x08001ca0
 8000628:	50000c00 	.word	0x50000c00

		 case 10:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	48a3      	ldr	r0, [pc, #652]	; (80008c0 <main+0x6a4>)
 8000632:	2200      	movs	r2, #0
 8000634:	0019      	movs	r1, r3
 8000636:	f000 fdae 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	48a0      	ldr	r0, [pc, #640]	; (80008c0 <main+0x6a4>)
 8000640:	2201      	movs	r2, #1
 8000642:	0019      	movs	r1, r3
 8000644:	f000 fda7 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	015b      	lsls	r3, r3, #5
 800064c:	489c      	ldr	r0, [pc, #624]	; (80008c0 <main+0x6a4>)
 800064e:	2200      	movs	r2, #0
 8000650:	0019      	movs	r1, r3
 8000652:	f000 fda0 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000656:	4b9b      	ldr	r3, [pc, #620]	; (80008c4 <main+0x6a8>)
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fd9a 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4896      	ldr	r0, [pc, #600]	; (80008c0 <main+0x6a4>)
 8000668:	2200      	movs	r2, #0
 800066a:	0019      	movs	r1, r3
 800066c:	f000 fd93 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 8000670:	4b93      	ldr	r3, [pc, #588]	; (80008c0 <main+0x6a4>)
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fd8d 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 800067c:	4b90      	ldr	r3, [pc, #576]	; (80008c0 <main+0x6a4>)
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd87 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 8000688:	e119      	b.n	80008be <main+0x6a2>

		 case 11:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	488c      	ldr	r0, [pc, #560]	; (80008c0 <main+0x6a4>)
 8000690:	2200      	movs	r2, #0
 8000692:	0019      	movs	r1, r3
 8000694:	f000 fd7f 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	4888      	ldr	r0, [pc, #544]	; (80008c0 <main+0x6a4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	0019      	movs	r1, r3
 80006a2:	f000 fd78 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	015b      	lsls	r3, r3, #5
 80006aa:	4885      	ldr	r0, [pc, #532]	; (80008c0 <main+0x6a4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	0019      	movs	r1, r3
 80006b0:	f000 fd71 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80006b4:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <main+0x6a8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	2104      	movs	r1, #4
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd6b 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	487e      	ldr	r0, [pc, #504]	; (80008c0 <main+0x6a4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fd64 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80006ce:	4b7c      	ldr	r3, [pc, #496]	; (80008c0 <main+0x6a4>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd5e 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80006da:	4b79      	ldr	r3, [pc, #484]	; (80008c0 <main+0x6a4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fd58 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 80006e6:	e0ea      	b.n	80008be <main+0x6a2>

		 case 12:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4874      	ldr	r0, [pc, #464]	; (80008c0 <main+0x6a4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0019      	movs	r1, r3
 80006f2:	f000 fd50 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4871      	ldr	r0, [pc, #452]	; (80008c0 <main+0x6a4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	0019      	movs	r1, r3
 8000700:	f000 fd49 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	015b      	lsls	r3, r3, #5
 8000708:	486d      	ldr	r0, [pc, #436]	; (80008c0 <main+0x6a4>)
 800070a:	2201      	movs	r2, #1
 800070c:	0019      	movs	r1, r3
 800070e:	f000 fd42 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <main+0x6a8>)
 8000714:	2200      	movs	r2, #0
 8000716:	2104      	movs	r1, #4
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fd3c 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4867      	ldr	r0, [pc, #412]	; (80008c0 <main+0x6a4>)
 8000724:	2200      	movs	r2, #0
 8000726:	0019      	movs	r1, r3
 8000728:	f000 fd35 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 800072c:	4b64      	ldr	r3, [pc, #400]	; (80008c0 <main+0x6a4>)
 800072e:	2201      	movs	r2, #1
 8000730:	2140      	movs	r1, #64	; 0x40
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fd2f 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 8000738:	4b61      	ldr	r3, [pc, #388]	; (80008c0 <main+0x6a4>)
 800073a:	2201      	movs	r2, #1
 800073c:	2110      	movs	r1, #16
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fd29 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 8000744:	e0bb      	b.n	80008be <main+0x6a2>

		 case 13:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	485d      	ldr	r0, [pc, #372]	; (80008c0 <main+0x6a4>)
 800074c:	2200      	movs	r2, #0
 800074e:	0019      	movs	r1, r3
 8000750:	f000 fd21 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	4859      	ldr	r0, [pc, #356]	; (80008c0 <main+0x6a4>)
 800075a:	2200      	movs	r2, #0
 800075c:	0019      	movs	r1, r3
 800075e:	f000 fd1a 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	015b      	lsls	r3, r3, #5
 8000766:	4856      	ldr	r0, [pc, #344]	; (80008c0 <main+0x6a4>)
 8000768:	2200      	movs	r2, #0
 800076a:	0019      	movs	r1, r3
 800076c:	f000 fd13 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000770:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <main+0x6a8>)
 8000772:	2201      	movs	r2, #1
 8000774:	2104      	movs	r1, #4
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fd0d 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	484f      	ldr	r0, [pc, #316]	; (80008c0 <main+0x6a4>)
 8000782:	2201      	movs	r2, #1
 8000784:	0019      	movs	r1, r3
 8000786:	f000 fd06 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <main+0x6a4>)
 800078c:	2200      	movs	r2, #0
 800078e:	2140      	movs	r1, #64	; 0x40
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fd00 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <main+0x6a4>)
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fcfa 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 80007a2:	e08c      	b.n	80008be <main+0x6a2>

		 case 14:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4845      	ldr	r0, [pc, #276]	; (80008c0 <main+0x6a4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	0019      	movs	r1, r3
 80007ae:	f000 fcf2 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4842      	ldr	r0, [pc, #264]	; (80008c0 <main+0x6a4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	0019      	movs	r1, r3
 80007bc:	f000 fceb 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	483e      	ldr	r0, [pc, #248]	; (80008c0 <main+0x6a4>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	0019      	movs	r1, r3
 80007ca:	f000 fce4 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <main+0x6a8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fcde 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4838      	ldr	r0, [pc, #224]	; (80008c0 <main+0x6a4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f000 fcd7 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <main+0x6a4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	2140      	movs	r1, #64	; 0x40
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fcd1 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <main+0x6a4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fccb 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 8000800:	e05d      	b.n	80008be <main+0x6a2>

		 case 15:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	482e      	ldr	r0, [pc, #184]	; (80008c0 <main+0x6a4>)
 8000808:	2200      	movs	r2, #0
 800080a:	0019      	movs	r1, r3
 800080c:	f000 fcc3 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	482a      	ldr	r0, [pc, #168]	; (80008c0 <main+0x6a4>)
 8000816:	2201      	movs	r2, #1
 8000818:	0019      	movs	r1, r3
 800081a:	f000 fcbc 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	4827      	ldr	r0, [pc, #156]	; (80008c0 <main+0x6a4>)
 8000824:	2201      	movs	r2, #1
 8000826:	0019      	movs	r1, r3
 8000828:	f000 fcb5 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <main+0x6a8>)
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fcaf 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4820      	ldr	r0, [pc, #128]	; (80008c0 <main+0x6a4>)
 800083e:	2200      	movs	r2, #0
 8000840:	0019      	movs	r1, r3
 8000842:	f000 fca8 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <main+0x6a4>)
 8000848:	2201      	movs	r2, #1
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fca2 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <main+0x6a4>)
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fc9c 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 800085e:	e02e      	b.n	80008be <main+0x6a2>

		 default:
				 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <main+0x6a4>)
 8000866:	2201      	movs	r2, #1
 8000868:	0019      	movs	r1, r3
 800086a:	f000 fc94 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <main+0x6a4>)
 8000874:	2201      	movs	r2, #1
 8000876:	0019      	movs	r1, r3
 8000878:	f000 fc8d 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	015b      	lsls	r3, r3, #5
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <main+0x6a4>)
 8000882:	2201      	movs	r2, #1
 8000884:	0019      	movs	r1, r3
 8000886:	f000 fc86 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <main+0x6a8>)
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fc80 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main+0x6a4>)
 800089c:	2201      	movs	r2, #1
 800089e:	0019      	movs	r1, r3
 80008a0:	f000 fc79 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <main+0x6a4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fc73 	bl	8001196 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <main+0x6a4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fc6d 	bl	8001196 <HAL_GPIO_WritePin>
				 break;
 80008bc:	46c0      	nop			; (mov r8, r8)
	 bit1 = HAL_GPIO_ReadPin(PC3_GPIO_Port, PC3_Pin);
 80008be:	e4b5      	b.n	800022c <main+0x10>
 80008c0:	50000800 	.word	0x50000800
 80008c4:	50000c00 	.word	0x50000c00

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b095      	sub	sp, #84	; 0x54
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	2414      	movs	r4, #20
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	233c      	movs	r3, #60	; 0x3c
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f001 f9cd 	bl	8001c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2310      	movs	r3, #16
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f001 f9c6 	bl	8001c78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fc6d 	bl	80011d0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2202      	movs	r2, #2
 80008fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2240      	movs	r2, #64	; 0x40
 8000910:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2202      	movs	r2, #2
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2208      	movs	r2, #8
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0292      	lsls	r2, r2, #10
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	0492      	lsls	r2, r2, #18
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0592      	lsls	r2, r2, #22
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	187b      	adds	r3, r7, r1
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fc83 	bl	8001250 <HAL_RCC_OscConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800094e:	f000 f8b1 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2202      	movs	r2, #2
 800095c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2102      	movs	r1, #2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 ffd4 	bl	800191c <HAL_RCC_ClockConfig>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000978:	f000 f89c 	bl	8000ab4 <Error_Handler>
  }
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b015      	add	sp, #84	; 0x54
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	2414      	movs	r4, #20
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	2314      	movs	r3, #20
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f001 f96f 	bl	8001c78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 800099c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099e:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009a0:	2104      	movs	r1, #4
 80009a2:	430a      	orrs	r2, r1
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009aa:	2204      	movs	r2, #4
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009b8:	2120      	movs	r1, #32
 80009ba:	430a      	orrs	r2, r1
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c2:	2220      	movs	r2, #32
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009e8:	2108      	movs	r1, #8
 80009ea:	430a      	orrs	r2, r1
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2208      	movs	r2, #8
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED7_Pin|LED6_Pin
 80009fa:	492a      	ldr	r1, [pc, #168]	; (8000aa4 <MX_GPIO_Init+0x120>)
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0x124>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fbc8 	bl	8001196 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <MX_GPIO_Init+0x128>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fbc2 	bl	8001196 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED7_Pin LED6_Pin
                           LED1_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED7_Pin|LED6_Pin
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_GPIO_Init+0x120>)
 8000a16:	601a      	str	r2, [r3, #0]
                          |LED1_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <MX_GPIO_Init+0x124>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f000 fa27 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0_Pin PF1_Pin */
  GPIO_InitStruct.Pin = PF0_Pin|PF1_Pin;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x12c>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 fa18 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC2_Pin|PC3_Pin;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <MX_GPIO_Init+0x124>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f000 fa09 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000a72:	0021      	movs	r1, r4
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2204      	movs	r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <MX_GPIO_Init+0x128>)
 8000a90:	0019      	movs	r1, r3
 8000a92:	0010      	movs	r0, r2
 8000a94:	f000 f9f6 	bl	8000e84 <HAL_GPIO_Init>

}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b00b      	add	sp, #44	; 0x2c
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	00001b50 	.word	0x00001b50
 8000aa8:	50000800 	.word	0x50000800
 8000aac:	50000c00 	.word	0x50000c00
 8000ab0:	50001400 	.word	0x50001400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0549      	lsls	r1, r1, #21
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	055b      	lsls	r3, r3, #21
 8000af4:	4013      	ands	r3, r2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f8f6 	bl	8000cf0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f89c 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b4c:	f7ff fff7 	bl	8000b3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f001 f85b 	bl	8001c30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b7a:	f7ff fb4f 	bl	800021c <main>

08000b7e <LoopForever>:

LoopForever:
  b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	08001d28 	.word	0x08001d28
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	20000040 	.word	0x20000040

08000b98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_COMP_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x3c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Init+0x3c>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	0049      	lsls	r1, r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f810 	bl	8000bdc <HAL_InitTick>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e001      	b.n	8000bcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff ff7a 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_InitTick+0x88>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d02b      	beq.n	8000c4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_InitTick+0x8c>)
 8000bf6:	681c      	ldr	r4, [r3, #0]
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_InitTick+0x88>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	23fa      	movs	r3, #250	; 0xfa
 8000c00:	0098      	lsls	r0, r3, #2
 8000c02:	f7ff fa7f 	bl	8000104 <__udivsi3>
 8000c06:	0003      	movs	r3, r0
 8000c08:	0019      	movs	r1, r3
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	f7ff fa7a 	bl	8000104 <__udivsi3>
 8000c10:	0003      	movs	r3, r0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f929 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d112      	bne.n	8000c42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d80a      	bhi.n	8000c38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f908 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_InitTick+0x90>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e00d      	b.n	8000c54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e008      	b.n	8000c54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e003      	b.n	8000c54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b005      	add	sp, #20
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	18d2      	adds	r2, r2, r3
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_IncTick+0x20>)
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	2000003c 	.word	0x2000003c

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <HAL_GetTick+0x10>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	2000003c 	.word	0x2000003c

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff fff0 	bl	8000c94 <HAL_GetTick>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	189b      	adds	r3, r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	f7ff ffe0 	bl	8000c94 <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40010000 	.word	0x40010000
 8000d18:	fffff9ff 	.word	0xfffff9ff

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d30:	d828      	bhi.n	8000d84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <__NVIC_SetPriority+0xd4>)
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	33c0      	adds	r3, #192	; 0xc0
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	589b      	ldr	r3, [r3, r2]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	; 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	481f      	ldr	r0, [pc, #124]	; (8000df0 <__NVIC_SetPriority+0xd4>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	33c0      	adds	r3, #192	; 0xc0
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d82:	e031      	b.n	8000de8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <__NVIC_SetPriority+0xd8>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	400b      	ands	r3, r1
 8000d90:	3b08      	subs	r3, #8
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3306      	adds	r3, #6
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	0011      	movs	r1, r2
 8000da4:	2203      	movs	r2, #3
 8000da6:	400a      	ands	r2, r1
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	21ff      	movs	r1, #255	; 0xff
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	43d2      	mvns	r2, r2
 8000db2:	401a      	ands	r2, r3
 8000db4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	019b      	lsls	r3, r3, #6
 8000dba:	22ff      	movs	r2, #255	; 0xff
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	4003      	ands	r3, r0
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <__NVIC_SetPriority+0xd8>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	001c      	movs	r4, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	4023      	ands	r3, r4
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	3306      	adds	r3, #6
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	18c3      	adds	r3, r0, r3
 8000de4:	3304      	adds	r3, #4
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b003      	add	sp, #12
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	045b      	lsls	r3, r3, #17
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d301      	bcc.n	8000e10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e010      	b.n	8000e32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <SysTick_Config+0x44>)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	3a01      	subs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e18:	2301      	movs	r3, #1
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff ff7c 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x44>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x44>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffbf 	bl	8000df8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e14d      	b.n	8001130 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x28>
 8000eaa:	e13e      	b.n	800112a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	2201      	movs	r2, #1
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2207      	movs	r2, #7
 8000f80:	4013      	ands	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2107      	movs	r1, #7
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	6939      	ldr	r1, [r7, #16]
 8000fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	23c0      	movs	r3, #192	; 0xc0
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x174>
 8000ff6:	e098      	b.n	800112a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ff8:	4a53      	ldr	r2, [pc, #332]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3318      	adds	r3, #24
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	589b      	ldr	r3, [r3, r2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2203      	movs	r2, #3
 800100a:	4013      	ands	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	220f      	movs	r2, #15
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	429a      	cmp	r2, r3
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x1d6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2c8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x1d2>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a47      	ldr	r2, [pc, #284]	; (8001150 <HAL_GPIO_Init+0x2cc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x1ce>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a46      	ldr	r2, [pc, #280]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x1ca>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x1c6>
 8001046:	2304      	movs	r3, #4
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x1d8>
 800104a:	2305      	movs	r3, #5
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x1d8>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x1d8>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x1d8>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x1d8>
 800105a:	2300      	movs	r3, #0
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	2103      	movs	r1, #3
 8001060:	400a      	ands	r2, r1
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	4093      	lsls	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800106c:	4936      	ldr	r1, [pc, #216]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3318      	adds	r3, #24
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	58d3      	ldr	r3, [r2, r3]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	4013      	ands	r3, r2
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a0:	4929      	ldr	r1, [pc, #164]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 80010aa:	2384      	movs	r3, #132	; 0x84
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ce:	491e      	ldr	r1, [pc, #120]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 80010d0:	2284      	movs	r2, #132	; 0x84
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	039b      	lsls	r3, r3, #14
 8001118:	4013      	ands	r3, r2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	40da      	lsrs	r2, r3
 8001138:	1e13      	subs	r3, r2, #0
 800113a:	d000      	beq.n	800113e <HAL_GPIO_Init+0x2ba>
 800113c:	e6aa      	b.n	8000e94 <HAL_GPIO_Init+0x10>
  }
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b006      	add	sp, #24
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021800 	.word	0x40021800
 800114c:	50000400 	.word	0x50000400
 8001150:	50000800 	.word	0x50000800
 8001154:	50000c00 	.word	0x50000c00
 8001158:	50001000 	.word	0x50001000

0800115c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	000a      	movs	r2, r1
 8001166:	1cbb      	adds	r3, r7, #2
 8001168:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	1cba      	adds	r2, r7, #2
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4013      	ands	r3, r2
 8001174:	d004      	beq.n	8001180 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e003      	b.n	8001188 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	0008      	movs	r0, r1
 80011a0:	0011      	movs	r1, r2
 80011a2:	1cbb      	adds	r3, r7, #2
 80011a4:	1c02      	adds	r2, r0, #0
 80011a6:	801a      	strh	r2, [r3, #0]
 80011a8:	1c7b      	adds	r3, r7, #1
 80011aa:	1c0a      	adds	r2, r1, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ae:	1c7b      	adds	r3, r7, #1
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	1cbb      	adds	r3, r7, #2
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011be:	e003      	b.n	80011c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011de:	4013      	ands	r3, r2
 80011e0:	0019      	movs	r1, r3
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d11f      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	0013      	movs	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	189b      	adds	r3, r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4912      	ldr	r1, [pc, #72]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001202:	0018      	movs	r0, r3
 8001204:	f7fe ff7e 	bl	8000104 <__udivsi3>
 8001208:	0003      	movs	r3, r0
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	e008      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e001      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e009      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	401a      	ands	r2, r3
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	429a      	cmp	r2, r3
 8001232:	d0ed      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40007000 	.word	0x40007000
 8001244:	fffff9ff 	.word	0xfffff9ff
 8001248:	20000000 	.word	0x20000000
 800124c:	000f4240 	.word	0x000f4240

08001250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	f000 fb56 	bl	8001910 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x20>
 800126e:	e07d      	b.n	800136c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001270:	4bc3      	ldr	r3, [pc, #780]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2238      	movs	r2, #56	; 0x38
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127a:	4bc1      	ldr	r3, [pc, #772]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2203      	movs	r2, #3
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x40>
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d002      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4bba      	ldr	r3, [pc, #744]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	029b      	lsls	r3, r3, #10
 800129e:	4013      	ands	r3, r2
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x11a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d15f      	bne.n	800136a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 fb30 	bl	8001910 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x7c>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4baf      	ldr	r3, [pc, #700]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0249      	lsls	r1, r1, #9
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e020      	b.n	800130e <HAL_RCC_OscConfig+0xbe>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10e      	bne.n	80012f6 <HAL_RCC_OscConfig+0xa6>
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	02c9      	lsls	r1, r1, #11
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0xbe>
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012fc:	49a1      	ldr	r1, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x334>)
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4b9f      	ldr	r3, [pc, #636]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001308:	499f      	ldr	r1, [pc, #636]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fcbd 	bl	8000c94 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fcb8 	bl	8000c94 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e2ee      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xd0>
 800133e:	e015      	b.n	800136c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fca8 	bl	8000c94 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134a:	f7ff fca3 	bl	8000c94 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e2d9      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0xfa>
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_RCC_OscConfig+0x128>
 8001376:	e099      	b.n	80014ac <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2238      	movs	r2, #56	; 0x38
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x148>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d002      	beq.n	800139e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d135      	bne.n	800140a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139e:	4b78      	ldr	r3, [pc, #480]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x166>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e2ac      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	021a      	lsls	r2, r3, #8
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x340>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0adb      	lsrs	r3, r3, #11
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x344>)
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x348>)
 80013f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x34c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fbed 	bl	8000bdc <HAL_InitTick>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d051      	beq.n	80014aa <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e282      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d030      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x340>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0049      	lsls	r1, r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc2e 	bl	8000c94 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc29 	bl	8000c94 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e25f      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800147a:	4949      	ldr	r1, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x350>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc08 	bl	8000c94 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fc03 	bl	8000c94 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e239      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x23a>
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2208      	movs	r2, #8
 80014b2:	4013      	ands	r3, r2
 80014b4:	d047      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2238      	movs	r2, #56	; 0x38
 80014bc:	4013      	ands	r3, r2
 80014be:	2b18      	cmp	r3, #24
 80014c0:	d10a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d03c      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d138      	bne.n	8001546 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e21b      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d019      	beq.n	8001514 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbd2 	bl	8000c94 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbcd 	bl	8000c94 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e203      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2a6>
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001516:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800151a:	2101      	movs	r1, #1
 800151c:	438a      	bics	r2, r1
 800151e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fbb8 	bl	8000c94 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fbb3 	bl	8000c94 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1e9      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x302>
 8001550:	e0c6      	b.n	80016e0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2238      	movs	r2, #56	; 0x38
 8001560:	4013      	ands	r3, r2
 8001562:	2b20      	cmp	r3, #32
 8001564:	d11e      	bne.n	80015a4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x322>
 8001570:	e0b6      	b.n	80016e0 <HAL_RCC_OscConfig+0x490>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d000      	beq.n	800157c <HAL_RCC_OscConfig+0x32c>
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e1c7      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
 8001580:	40021000 	.word	0x40021000
 8001584:	fffeffff 	.word	0xfffeffff
 8001588:	fffbffff 	.word	0xfffbffff
 800158c:	ffff80ff 	.word	0xffff80ff
 8001590:	ffffc7ff 	.word	0xffffc7ff
 8001594:	00f42400 	.word	0x00f42400
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004
 80015a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015a4:	4bb8      	ldr	r3, [pc, #736]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x364>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x366>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d011      	beq.n	80015de <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4bb3      	ldr	r3, [pc, #716]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80015bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015be:	4bb2      	ldr	r3, [pc, #712]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c8:	4baf      	ldr	r3, [pc, #700]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80015ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015d6:	231f      	movs	r3, #31
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4bab      	ldr	r3, [pc, #684]	; (800188c <HAL_RCC_OscConfig+0x63c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4ba8      	ldr	r3, [pc, #672]	; (800188c <HAL_RCC_OscConfig+0x63c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4ba7      	ldr	r3, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x63c>)
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	0049      	lsls	r1, r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb4c 	bl	8000c94 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fb47 	bl	8000c94 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e17d      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b9d      	ldr	r3, [pc, #628]	; (800188c <HAL_RCC_OscConfig+0x63c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x3e6>
 8001628:	4b97      	ldr	r3, [pc, #604]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800162a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162c:	4b96      	ldr	r3, [pc, #600]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x420>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x408>
 800163e:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	4b91      	ldr	r3, [pc, #580]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001644:	2104      	movs	r1, #4
 8001646:	430a      	orrs	r2, r1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	4b8f      	ldr	r3, [pc, #572]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800164c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164e:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x420>
 8001658:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	4b8a      	ldr	r3, [pc, #552]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c
 8001664:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001668:	4b87      	ldr	r3, [pc, #540]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800166a:	2104      	movs	r1, #4
 800166c:	438a      	bics	r2, r1
 800166e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d014      	beq.n	80016a2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fb0c 	bl	8000c94 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fb07 	bl	8000c94 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a80      	ldr	r2, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x640>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e13c      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001696:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x432>
 80016a0:	e013      	b.n	80016ca <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff faf7 	bl	8000c94 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff faf2 	bl	8000c94 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a76      	ldr	r2, [pc, #472]	; (8001890 <HAL_RCC_OscConfig+0x640>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e127      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	4b71      	ldr	r3, [pc, #452]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80016d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d8:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80016da:	496e      	ldr	r1, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x644>)
 80016dc:	400a      	ands	r2, r1
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2220      	movs	r2, #32
 80016e6:	4013      	ands	r3, r2
 80016e8:	d039      	beq.n	800175e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01b      	beq.n	800172a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b64      	ldr	r3, [pc, #400]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	03c9      	lsls	r1, r1, #15
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fac8 	bl	8000c94 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170a:	f7ff fac3 	bl	8000c94 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0f9      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800171c:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x4ba>
 8001728:	e019      	b.n	800175e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172a:	4b57      	ldr	r3, [pc, #348]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b56      	ldr	r3, [pc, #344]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001730:	4959      	ldr	r1, [pc, #356]	; (8001898 <HAL_RCC_OscConfig+0x648>)
 8001732:	400a      	ands	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff faad 	bl	8000c94 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001740:	f7ff faa8 	bl	8000c94 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0de      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	4013      	ands	r3, r2
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <HAL_RCC_OscConfig+0x518>
 8001766:	e0d2      	b.n	800190e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2238      	movs	r2, #56	; 0x38
 800176e:	4013      	ands	r3, r2
 8001770:	2b10      	cmp	r3, #16
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x526>
 8001774:	e081      	b.n	800187a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d156      	bne.n	800182c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b42      	ldr	r3, [pc, #264]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001784:	4945      	ldr	r1, [pc, #276]	; (800189c <HAL_RCC_OscConfig+0x64c>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fa83 	bl	8000c94 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fa7e 	bl	8000c94 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b4      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x650>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	431a      	orrs	r2, r3
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0449      	lsls	r1, r1, #17
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	0549      	lsls	r1, r1, #21
 80017fe:	430a      	orrs	r2, r1
 8001800:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fa47 	bl	8000c94 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fa42 	bl	8000c94 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e078      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x5bc>
 800182a:	e070      	b.n	800190e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001832:	491a      	ldr	r1, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x64c>)
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800183e:	2103      	movs	r1, #3
 8001840:	438a      	bics	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800184a:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_RCC_OscConfig+0x654>)
 800184c:	400a      	ands	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fa20 	bl	8000c94 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fa1b 	bl	8000c94 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e051      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x638>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049b      	lsls	r3, r3, #18
 8001874:	4013      	ands	r3, r2
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x60a>
 8001878:	e049      	b.n	800190e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e044      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	00001388 	.word	0x00001388
 8001894:	efffffff 	.word	0xefffffff
 8001898:	ffbfffff 	.word	0xffbfffff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	11c1808c 	.word	0x11c1808c
 80018a4:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x6c8>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2203      	movs	r2, #3
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d126      	bne.n	800190a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2270      	movs	r2, #112	; 0x70
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11f      	bne.n	800190a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	23fe      	movs	r3, #254	; 0xfe
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d116      	bne.n	800190a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	23f8      	movs	r3, #248	; 0xf8
 80018e0:	039b      	lsls	r3, r3, #14
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	23e0      	movs	r3, #224	; 0xe0
 80018f0:	051b      	lsls	r3, r3, #20
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	0f5b      	lsrs	r3, r3, #29
 8001900:	075a      	lsls	r2, r3, #29
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b008      	add	sp, #32
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0e9      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d91e      	bls.n	800197c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2207      	movs	r2, #7
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001950:	f7ff f9a0 	bl	8000c94 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f99b 	bl	8000c94 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0ca      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d006      	beq.n	800199e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	21e0      	movs	r1, #224	; 0xe0
 8001998:	01c9      	lsls	r1, r1, #7
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <HAL_RCC_ClockConfig+0x1fc>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d057      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4013      	ands	r3, r2
 80019ce:	d12b      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e097      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	049b      	lsls	r3, r3, #18
 80019e4:	4013      	ands	r3, r2
 80019e6:	d11f      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e08b      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07f      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e074      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e06d      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f92a 	bl	8000c94 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f925 	bl	8000c94 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a2f      	ldr	r2, [pc, #188]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e054      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2238      	movs	r2, #56	; 0x38
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2207      	movs	r2, #7
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d21e      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4393      	bics	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f902 	bl	8000c94 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff f8fd 	bl	8000c94 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e02c      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_RCC_ClockConfig+0x200>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ad6:	f000 f829 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ada:	0001      	movs	r1, r0
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_RCC_ClockConfig+0x204>)
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	221f      	movs	r2, #31
 8001aee:	4013      	ands	r3, r2
 8001af0:	000a      	movs	r2, r1
 8001af2:	40da      	lsrs	r2, r3
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x208>)
 8001af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x20c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff f86d 	bl	8000bdc <HAL_InitTick>
 8001b02:	0003      	movs	r3, r0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	00001388 	.word	0x00001388
 8001b14:	40021000 	.word	0x40021000
 8001b18:	fffff0ff 	.word	0xfffff0ff
 8001b1c:	ffff8fff 	.word	0xffff8fff
 8001b20:	08001ce0 	.word	0x08001ce0
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d10f      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0adb      	lsrs	r3, r3, #11
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	4835      	ldr	r0, [pc, #212]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b52:	f7fe fad7 	bl	8000104 <__udivsi3>
 8001b56:	0003      	movs	r3, r0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e05d      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2238      	movs	r2, #56	; 0x38
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e054      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d138      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	4824      	ldr	r0, [pc, #144]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b9c:	f7fe fab2 	bl	8000104 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	227f      	movs	r2, #127	; 0x7f
 8001bac:	4013      	ands	r3, r2
 8001bae:	434b      	muls	r3, r1
 8001bb0:	617b      	str	r3, [r7, #20]
        break;
 8001bb2:	e00d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	481c      	ldr	r0, [pc, #112]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bb8:	f7fe faa4 	bl	8000104 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	227f      	movs	r2, #127	; 0x7f
 8001bc8:	4013      	ands	r3, r2
 8001bca:	434b      	muls	r3, r1
 8001bcc:	617b      	str	r3, [r7, #20]
        break;
 8001bce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0f5b      	lsrs	r3, r3, #29
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	3301      	adds	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7fe fa8f 	bl	8000104 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e015      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2238      	movs	r2, #56	; 0x38
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d103      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d103      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c0c:	23fa      	movs	r3, #250	; 0xfa
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e001      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c18:	693b      	ldr	r3, [r7, #16]
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b006      	add	sp, #24
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	2600      	movs	r6, #0
 8001c34:	4d0c      	ldr	r5, [pc, #48]	; (8001c68 <__libc_init_array+0x38>)
 8001c36:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <__libc_init_array+0x3c>)
 8001c38:	1b64      	subs	r4, r4, r5
 8001c3a:	10a4      	asrs	r4, r4, #2
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	2600      	movs	r6, #0
 8001c42:	f000 f821 	bl	8001c88 <_init>
 8001c46:	4d0a      	ldr	r5, [pc, #40]	; (8001c70 <__libc_init_array+0x40>)
 8001c48:	4c0a      	ldr	r4, [pc, #40]	; (8001c74 <__libc_init_array+0x44>)
 8001c4a:	1b64      	subs	r4, r4, r5
 8001c4c:	10a4      	asrs	r4, r4, #2
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	00b3      	lsls	r3, r6, #2
 8001c56:	58eb      	ldr	r3, [r5, r3]
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	00b3      	lsls	r3, r6, #2
 8001c60:	58eb      	ldr	r3, [r5, r3]
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	08001d20 	.word	0x08001d20
 8001c6c:	08001d20 	.word	0x08001d20
 8001c70:	08001d20 	.word	0x08001d20
 8001c74:	08001d24 	.word	0x08001d24

08001c78 <memset>:
 8001c78:	0003      	movs	r3, r0
 8001c7a:	1882      	adds	r2, r0, r2
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <memset+0xa>
 8001c80:	4770      	bx	lr
 8001c82:	7019      	strb	r1, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	e7f9      	b.n	8001c7c <memset+0x4>

08001c88 <_init>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr

08001c94 <_fini>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr
