
teste-proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003034  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003178  08003178  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800318c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800318c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076f2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a62  00000000  00000000  00027727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00029190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  000298e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001698d  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008aa8  00000000  00000000  000408f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081366  00000000  00000000  0004939d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bac  00000000  00000000  000ca758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003128 	.word	0x08003128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003128 	.word	0x08003128

0800014c <displayNum>:
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
}


void displayNum(uint16_t numero, uint8_t display){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	717b      	strb	r3, [r7, #5]

		switch(display)
 800015c:	797b      	ldrb	r3, [r7, #5]
 800015e:	3b01      	subs	r3, #1
 8000160:	2b03      	cmp	r3, #3
 8000162:	d86f      	bhi.n	8000244 <displayNum+0xf8>
 8000164:	a201      	add	r2, pc, #4	; (adr r2, 800016c <displayNum+0x20>)
 8000166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016a:	bf00      	nop
 800016c:	0800017d 	.word	0x0800017d
 8000170:	080001af 	.word	0x080001af
 8000174:	080001e1 	.word	0x080001e1
 8000178:	08000213 	.word	0x08000213
		{
		case 1:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 0);
 800017c:	2200      	movs	r2, #0
 800017e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000182:	48cc      	ldr	r0, [pc, #816]	; (80004b4 <displayNum+0x368>)
 8000184:	f001 fca2 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800018e:	48c9      	ldr	r0, [pc, #804]	; (80004b4 <displayNum+0x368>)
 8000190:	f001 fc9c 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019a:	48c6      	ldr	r0, [pc, #792]	; (80004b4 <displayNum+0x368>)
 800019c:	f001 fc96 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a6:	48c3      	ldr	r0, [pc, #780]	; (80004b4 <displayNum+0x368>)
 80001a8:	f001 fc90 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 80001ac:	e063      	b.n	8000276 <displayNum+0x12a>

		case 2:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 1);
 80001ae:	2201      	movs	r2, #1
 80001b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b4:	48bf      	ldr	r0, [pc, #764]	; (80004b4 <displayNum+0x368>)
 80001b6:	f001 fc89 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c0:	48bc      	ldr	r0, [pc, #752]	; (80004b4 <displayNum+0x368>)
 80001c2:	f001 fc83 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48b9      	ldr	r0, [pc, #740]	; (80004b4 <displayNum+0x368>)
 80001ce:	f001 fc7d 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d8:	48b6      	ldr	r0, [pc, #728]	; (80004b4 <displayNum+0x368>)
 80001da:	f001 fc77 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 80001de:	e04a      	b.n	8000276 <displayNum+0x12a>

		case 3:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e6:	48b3      	ldr	r0, [pc, #716]	; (80004b4 <displayNum+0x368>)
 80001e8:	f001 fc70 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f2:	48b0      	ldr	r0, [pc, #704]	; (80004b4 <displayNum+0x368>)
 80001f4:	f001 fc6a 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fe:	48ad      	ldr	r0, [pc, #692]	; (80004b4 <displayNum+0x368>)
 8000200:	f001 fc64 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020a:	48aa      	ldr	r0, [pc, #680]	; (80004b4 <displayNum+0x368>)
 800020c:	f001 fc5e 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 8000210:	e031      	b.n	8000276 <displayNum+0x12a>

		case 4:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 1);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000218:	48a6      	ldr	r0, [pc, #664]	; (80004b4 <displayNum+0x368>)
 800021a:	f001 fc57 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000224:	48a3      	ldr	r0, [pc, #652]	; (80004b4 <displayNum+0x368>)
 8000226:	f001 fc51 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	48a0      	ldr	r0, [pc, #640]	; (80004b4 <displayNum+0x368>)
 8000232:	f001 fc4b 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023c:	489d      	ldr	r0, [pc, #628]	; (80004b4 <displayNum+0x368>)
 800023e:	f001 fc45 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 8000242:	e018      	b.n	8000276 <displayNum+0x12a>

		default:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024a:	489a      	ldr	r0, [pc, #616]	; (80004b4 <displayNum+0x368>)
 800024c:	f001 fc3e 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000256:	4897      	ldr	r0, [pc, #604]	; (80004b4 <displayNum+0x368>)
 8000258:	f001 fc38 	bl	8001acc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4894      	ldr	r0, [pc, #592]	; (80004b4 <displayNum+0x368>)
 8000264:	f001 fc32 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	4891      	ldr	r0, [pc, #580]	; (80004b4 <displayNum+0x368>)
 8000270:	f001 fc2c 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 8000274:	bf00      	nop
		}

		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	488f      	ldr	r0, [pc, #572]	; (80004b8 <displayNum+0x36c>)
 800027c:	f001 fc26 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2120      	movs	r1, #32
 8000284:	488c      	ldr	r0, [pc, #560]	; (80004b8 <displayNum+0x36c>)
 8000286:	f001 fc21 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2110      	movs	r1, #16
 800028e:	488a      	ldr	r0, [pc, #552]	; (80004b8 <displayNum+0x36c>)
 8000290:	f001 fc1c 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	4887      	ldr	r0, [pc, #540]	; (80004b8 <displayNum+0x36c>)
 800029a:	f001 fc17 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2104      	movs	r1, #4
 80002a2:	4885      	ldr	r0, [pc, #532]	; (80004b8 <displayNum+0x36c>)
 80002a4:	f001 fc12 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2102      	movs	r1, #2
 80002ac:	4882      	ldr	r0, [pc, #520]	; (80004b8 <displayNum+0x36c>)
 80002ae:	f001 fc0d 	bl	8001acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	4880      	ldr	r0, [pc, #512]	; (80004b8 <displayNum+0x36c>)
 80002b8:	f001 fc08 	bl	8001acc <HAL_GPIO_WritePin>

		switch(numero)
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	2b09      	cmp	r3, #9
 80002c0:	f200 8116 	bhi.w	80004f0 <displayNum+0x3a4>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <displayNum+0x180>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002f5 	.word	0x080002f5
 80002d0:	08000333 	.word	0x08000333
 80002d4:	08000349 	.word	0x08000349
 80002d8:	0800037d 	.word	0x0800037d
 80002dc:	080003b1 	.word	0x080003b1
 80002e0:	080003db 	.word	0x080003db
 80002e4:	0800040f 	.word	0x0800040f
 80002e8:	0800044d 	.word	0x0800044d
 80002ec:	0800046d 	.word	0x0800046d
 80002f0:	080004bd 	.word	0x080004bd
		{
		case 0:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	486f      	ldr	r0, [pc, #444]	; (80004b8 <displayNum+0x36c>)
 80002fa:	f001 fbe7 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2120      	movs	r1, #32
 8000302:	486d      	ldr	r0, [pc, #436]	; (80004b8 <displayNum+0x36c>)
 8000304:	f001 fbe2 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2110      	movs	r1, #16
 800030c:	486a      	ldr	r0, [pc, #424]	; (80004b8 <displayNum+0x36c>)
 800030e:	f001 fbdd 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4868      	ldr	r0, [pc, #416]	; (80004b8 <displayNum+0x36c>)
 8000318:	f001 fbd8 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2104      	movs	r1, #4
 8000320:	4865      	ldr	r0, [pc, #404]	; (80004b8 <displayNum+0x36c>)
 8000322:	f001 fbd3 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2102      	movs	r1, #2
 800032a:	4863      	ldr	r0, [pc, #396]	; (80004b8 <displayNum+0x36c>)
 800032c:	f001 fbce 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 8000330:	e0df      	b.n	80004f2 <displayNum+0x3a6>

		case 1:
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2120      	movs	r1, #32
 8000336:	4860      	ldr	r0, [pc, #384]	; (80004b8 <displayNum+0x36c>)
 8000338:	f001 fbc8 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2110      	movs	r1, #16
 8000340:	485d      	ldr	r0, [pc, #372]	; (80004b8 <displayNum+0x36c>)
 8000342:	f001 fbc3 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 8000346:	e0d4      	b.n	80004f2 <displayNum+0x3a6>

		case 2:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2140      	movs	r1, #64	; 0x40
 800034c:	485a      	ldr	r0, [pc, #360]	; (80004b8 <displayNum+0x36c>)
 800034e:	f001 fbbd 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2120      	movs	r1, #32
 8000356:	4858      	ldr	r0, [pc, #352]	; (80004b8 <displayNum+0x36c>)
 8000358:	f001 fbb8 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4855      	ldr	r0, [pc, #340]	; (80004b8 <displayNum+0x36c>)
 8000362:	f001 fbb3 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2104      	movs	r1, #4
 800036a:	4853      	ldr	r0, [pc, #332]	; (80004b8 <displayNum+0x36c>)
 800036c:	f001 fbae 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	4850      	ldr	r0, [pc, #320]	; (80004b8 <displayNum+0x36c>)
 8000376:	f001 fba9 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 800037a:	e0ba      	b.n	80004f2 <displayNum+0x3a6>

		case 3:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484d      	ldr	r0, [pc, #308]	; (80004b8 <displayNum+0x36c>)
 8000382:	f001 fba3 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	2120      	movs	r1, #32
 800038a:	484b      	ldr	r0, [pc, #300]	; (80004b8 <displayNum+0x36c>)
 800038c:	f001 fb9e 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	4848      	ldr	r0, [pc, #288]	; (80004b8 <displayNum+0x36c>)
 8000396:	f001 fb99 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2108      	movs	r1, #8
 800039e:	4846      	ldr	r0, [pc, #280]	; (80004b8 <displayNum+0x36c>)
 80003a0:	f001 fb94 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	4843      	ldr	r0, [pc, #268]	; (80004b8 <displayNum+0x36c>)
 80003aa:	f001 fb8f 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 80003ae:	e0a0      	b.n	80004f2 <displayNum+0x3a6>

		case 4:
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4840      	ldr	r0, [pc, #256]	; (80004b8 <displayNum+0x36c>)
 80003b6:	f001 fb89 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	483e      	ldr	r0, [pc, #248]	; (80004b8 <displayNum+0x36c>)
 80003c0:	f001 fb84 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2102      	movs	r1, #2
 80003c8:	483b      	ldr	r0, [pc, #236]	; (80004b8 <displayNum+0x36c>)
 80003ca:	f001 fb7f 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2101      	movs	r1, #1
 80003d2:	4839      	ldr	r0, [pc, #228]	; (80004b8 <displayNum+0x36c>)
 80003d4:	f001 fb7a 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 80003d8:	e08b      	b.n	80004f2 <displayNum+0x3a6>

		case 5:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4836      	ldr	r0, [pc, #216]	; (80004b8 <displayNum+0x36c>)
 80003e0:	f001 fb74 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2110      	movs	r1, #16
 80003e8:	4833      	ldr	r0, [pc, #204]	; (80004b8 <displayNum+0x36c>)
 80003ea:	f001 fb6f 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2108      	movs	r1, #8
 80003f2:	4831      	ldr	r0, [pc, #196]	; (80004b8 <displayNum+0x36c>)
 80003f4:	f001 fb6a 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2102      	movs	r1, #2
 80003fc:	482e      	ldr	r0, [pc, #184]	; (80004b8 <displayNum+0x36c>)
 80003fe:	f001 fb65 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	482c      	ldr	r0, [pc, #176]	; (80004b8 <displayNum+0x36c>)
 8000408:	f001 fb60 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 800040c:	e071      	b.n	80004f2 <displayNum+0x3a6>

		case 6:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2140      	movs	r1, #64	; 0x40
 8000412:	4829      	ldr	r0, [pc, #164]	; (80004b8 <displayNum+0x36c>)
 8000414:	f001 fb5a 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	4826      	ldr	r0, [pc, #152]	; (80004b8 <displayNum+0x36c>)
 800041e:	f001 fb55 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2108      	movs	r1, #8
 8000426:	4824      	ldr	r0, [pc, #144]	; (80004b8 <displayNum+0x36c>)
 8000428:	f001 fb50 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2104      	movs	r1, #4
 8000430:	4821      	ldr	r0, [pc, #132]	; (80004b8 <displayNum+0x36c>)
 8000432:	f001 fb4b 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2102      	movs	r1, #2
 800043a:	481f      	ldr	r0, [pc, #124]	; (80004b8 <displayNum+0x36c>)
 800043c:	f001 fb46 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2101      	movs	r1, #1
 8000444:	481c      	ldr	r0, [pc, #112]	; (80004b8 <displayNum+0x36c>)
 8000446:	f001 fb41 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 800044a:	e052      	b.n	80004f2 <displayNum+0x3a6>

		case 7:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	4819      	ldr	r0, [pc, #100]	; (80004b8 <displayNum+0x36c>)
 8000452:	f001 fb3b 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2120      	movs	r1, #32
 800045a:	4817      	ldr	r0, [pc, #92]	; (80004b8 <displayNum+0x36c>)
 800045c:	f001 fb36 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2110      	movs	r1, #16
 8000464:	4814      	ldr	r0, [pc, #80]	; (80004b8 <displayNum+0x36c>)
 8000466:	f001 fb31 	bl	8001acc <HAL_GPIO_WritePin>
			break;
 800046a:	e042      	b.n	80004f2 <displayNum+0x3a6>

		case 8:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	4811      	ldr	r0, [pc, #68]	; (80004b8 <displayNum+0x36c>)
 8000472:	f001 fb2b 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2120      	movs	r1, #32
 800047a:	480f      	ldr	r0, [pc, #60]	; (80004b8 <displayNum+0x36c>)
 800047c:	f001 fb26 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <displayNum+0x36c>)
 8000486:	f001 fb21 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2108      	movs	r1, #8
 800048e:	480a      	ldr	r0, [pc, #40]	; (80004b8 <displayNum+0x36c>)
 8000490:	f001 fb1c 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2104      	movs	r1, #4
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <displayNum+0x36c>)
 800049a:	f001 fb17 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2102      	movs	r1, #2
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <displayNum+0x36c>)
 80004a4:	f001 fb12 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2101      	movs	r1, #1
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <displayNum+0x36c>)
 80004ae:	f001 fb0d 	bl	8001acc <HAL_GPIO_WritePin>

			break;
 80004b2:	e01e      	b.n	80004f2 <displayNum+0x3a6>
 80004b4:	40010800 	.word	0x40010800
 80004b8:	40010c00 	.word	0x40010c00

		case 9:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	480f      	ldr	r0, [pc, #60]	; (8000500 <displayNum+0x3b4>)
 80004c2:	f001 fb03 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2120      	movs	r1, #32
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <displayNum+0x3b4>)
 80004cc:	f001 fafe 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2110      	movs	r1, #16
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <displayNum+0x3b4>)
 80004d6:	f001 faf9 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2101      	movs	r1, #1
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <displayNum+0x3b4>)
 80004e0:	f001 faf4 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2102      	movs	r1, #2
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <displayNum+0x3b4>)
 80004ea:	f001 faef 	bl	8001acc <HAL_GPIO_WritePin>

			break;
 80004ee:	e000      	b.n	80004f2 <displayNum+0x3a6>

		default:
			break;
 80004f0:	bf00      	nop
		}
		HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f000 fb34 	bl	8000b60 <HAL_Delay>
	}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010c00 	.word	0x40010c00

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fac7 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f889 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f963 	bl	80007dc <MX_GPIO_Init>
  MX_RTC_Init();
 8000516:	f000 f917 	bl	8000748 <MX_RTC_Init>
  MX_ADC1_Init();
 800051a:	f000 f8d7 	bl	80006cc <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pot = 0;
 800051e:	4b3b      	ldr	r3, [pc, #236]	; (800060c <main+0x108>)
 8000520:	2200      	movs	r2, #0
 8000522:	801a      	strh	r2, [r3, #0]
	 	  for(int x = 0; x < 237; x++)
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e015      	b.n	8000556 <main+0x52>
	 	  {
	 		  HAL_ADC_Start(&hadc1);
 800052a:	4839      	ldr	r0, [pc, #228]	; (8000610 <main+0x10c>)
 800052c:	f000 fc14 	bl	8000d58 <HAL_ADC_Start>
	 		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000534:	4836      	ldr	r0, [pc, #216]	; (8000610 <main+0x10c>)
 8000536:	f000 fcbd 	bl	8000eb4 <HAL_ADC_PollForConversion>
	 		  pot += HAL_ADC_GetValue(&hadc1);
 800053a:	4835      	ldr	r0, [pc, #212]	; (8000610 <main+0x10c>)
 800053c:	f000 fdc0 	bl	80010c0 <HAL_ADC_GetValue>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b31      	ldr	r3, [pc, #196]	; (800060c <main+0x108>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	4413      	add	r3, r2
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <main+0x108>)
 800054e:	801a      	strh	r2, [r3, #0]
	 	  for(int x = 0; x < 237; x++)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2bec      	cmp	r3, #236	; 0xec
 800055a:	dde6      	ble.n	800052a <main+0x26>
	 	  }
	 	  pot /= 237;
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <main+0x108>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <main+0x110>)
 8000562:	fba3 1302 	umull	r1, r3, r3, r2
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	0852      	lsrs	r2, r2, #1
 800056a:	4413      	add	r3, r2
 800056c:	09db      	lsrs	r3, r3, #7
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <main+0x108>)
 8000572:	801a      	strh	r2, [r3, #0]

	  HAL_RTC_GetTime(&hrtc, &tempo, RTC_FORMAT_BIN);
 8000574:	2200      	movs	r2, #0
 8000576:	4928      	ldr	r1, [pc, #160]	; (8000618 <main+0x114>)
 8000578:	4828      	ldr	r0, [pc, #160]	; (800061c <main+0x118>)
 800057a:	f002 f979 	bl	8002870 <HAL_RTC_GetTime>

	  displayNum(tempo.Hours/10,1);
 800057e:	4b26      	ldr	r3, [pc, #152]	; (8000618 <main+0x114>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <main+0x11c>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b29b      	uxth	r3, r3
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fddb 	bl	800014c <displayNum>
	  HAL_Delay(150);
 8000596:	2096      	movs	r0, #150	; 0x96
 8000598:	f000 fae2 	bl	8000b60 <HAL_Delay>
	  displayNum(tempo.Hours%10,2);
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <main+0x114>)
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <main+0x11c>)
 80005a2:	fba3 1302 	umull	r1, r3, r3, r2
 80005a6:	08d9      	lsrs	r1, r3, #3
 80005a8:	460b      	mov	r3, r1
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	2102      	movs	r1, #2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fdc7 	bl	800014c <displayNum>
	  HAL_Delay(150);
 80005be:	2096      	movs	r0, #150	; 0x96
 80005c0:	f000 face 	bl	8000b60 <HAL_Delay>

	  displayNum(tempo.Minutes/10,3);
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <main+0x114>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <main+0x11c>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	2103      	movs	r1, #3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdb8 	bl	800014c <displayNum>
	  HAL_Delay(150);
 80005dc:	2096      	movs	r0, #150	; 0x96
 80005de:	f000 fabf 	bl	8000b60 <HAL_Delay>
	  displayNum(tempo.Minutes%10,4);
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <main+0x114>)
 80005e4:	785a      	ldrb	r2, [r3, #1]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x11c>)
 80005e8:	fba3 1302 	umull	r1, r3, r3, r2
 80005ec:	08d9      	lsrs	r1, r3, #3
 80005ee:	460b      	mov	r3, r1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fda4 	bl	800014c <displayNum>
	  HAL_Delay(150);
 8000604:	2096      	movs	r0, #150	; 0x96
 8000606:	f000 faab 	bl	8000b60 <HAL_Delay>
	  pot = 0;
 800060a:	e788      	b.n	800051e <main+0x1a>
 800060c:	20000070 	.word	0x20000070
 8000610:	2000002c 	.word	0x2000002c
 8000614:	1485f0e1 	.word	0x1485f0e1
 8000618:	20000028 	.word	0x20000028
 800061c:	2000005c 	.word	0x2000005c
 8000620:	cccccccd 	.word	0xcccccccd

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062e:	2228      	movs	r2, #40	; 0x28
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fd70 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000654:	2309      	movs	r3, #9
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	2300      	movs	r3, #0
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fa52 	bl	8001b14 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000676:	f000 f913 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fcbd 	bl	8002014 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a0:	f000 f8fe 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80006a4:	2303      	movs	r3, #3
 80006a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fe33 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006c0:	f000 f8ee 	bl	80008a0 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_ADC1_Init+0x74>)
 80006de:	4a19      	ldr	r2, [pc, #100]	; (8000744 <MX_ADC1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_ADC1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_ADC1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_ADC1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_ADC1_Init+0x74>)
 80006f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_ADC1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ADC1_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_ADC1_Init+0x74>)
 800070a:	f000 fa4d 	bl	8000ba8 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f8c4 	bl	80008a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071c:	2301      	movs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_ADC1_Init+0x74>)
 800072a:	f000 fdab 	bl	8001284 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000734:	f000 f8b4 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000002c 	.word	0x2000002c
 8000744:	40012400 	.word	0x40012400

08000748 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2100      	movs	r1, #0
 8000752:	460a      	mov	r2, r1
 8000754:	801a      	strh	r2, [r3, #0]
 8000756:	460a      	mov	r2, r1
 8000758:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_RTC_Init+0x8c>)
 8000760:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <MX_RTC_Init+0x90>)
 8000762:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_RTC_Init+0x8c>)
 8000766:	f04f 32ff 	mov.w	r2, #4294967295
 800076a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_RTC_Init+0x8c>)
 800076e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000772:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <MX_RTC_Init+0x8c>)
 8000776:	f001 ff4d 	bl	8002614 <HAL_RTC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000780:	f000 f88e 	bl	80008a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 8000784:	2315      	movs	r3, #21
 8000786:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x33;
 8000788:	2333      	movs	r3, #51	; 0x33
 800078a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800078c:	2330      	movs	r3, #48	; 0x30
 800078e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2201      	movs	r2, #1
 8000794:	4619      	mov	r1, r3
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <MX_RTC_Init+0x8c>)
 8000798:	f001 ffd2 	bl	8002740 <HAL_RTC_SetTime>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 f87d 	bl	80008a0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007a6:	2301      	movs	r3, #1
 80007a8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007aa:	2301      	movs	r3, #1
 80007ac:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_RTC_Init+0x8c>)
 80007be:	f002 f92f 	bl	8002a20 <HAL_RTC_SetDate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80007c8:	f000 f86a 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000005c 	.word	0x2000005c
 80007d8:	40002800 	.word	0x40002800

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xb8>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <MX_GPIO_Init+0xb8>)
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xb8>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xb8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_GPIO_Init+0xb8>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_GPIO_Init+0xb8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Gg_Pin|LED_Ff_Pin|LED_Ee_Pin|LED_Dd_Pin
 8000838:	2200      	movs	r2, #0
 800083a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000840:	f001 f944 	bl	8001acc <HAL_GPIO_WritePin>
                          |LED_Cc_Pin|LED_Bb_Pin|LED_Aa_Pin|D4_Pin
                          |D3_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_F_Pin|LED_E_Pin|LED_FF_Pin
 8000844:	2200      	movs	r2, #0
 8000846:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0xc0>)
 800084c:	f001 f93e 	bl	8001acc <HAL_GPIO_WritePin>
                          |LED_A_Pin|D5_Pin|D6_Pin|LED_GG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Gg_Pin LED_Ff_Pin LED_Ee_Pin LED_Dd_Pin
                           LED_Cc_Pin LED_Bb_Pin LED_Aa_Pin D4_Pin
                           D3_Pin D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = LED_Gg_Pin|LED_Ff_Pin|LED_Ee_Pin|LED_Dd_Pin
 8000850:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000854:	613b      	str	r3, [r7, #16]
                          |LED_Cc_Pin|LED_Bb_Pin|LED_Aa_Pin|D4_Pin
                          |D3_Pin|D2_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xbc>)
 800086a:	f000 ffb5 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_F_Pin LED_E_Pin LED_FF_Pin
                           LED_EE_Pin LED_DD_Pin LED_CC_Pin LED_BB_Pin
                           LED_AA_Pin LED_D_Pin LED_C_Pin LED_B_Pin
                           LED_A_Pin D5_Pin D6_Pin LED_GG_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_F_Pin|LED_E_Pin|LED_FF_Pin
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	613b      	str	r3, [r7, #16]
                          |LED_EE_Pin|LED_DD_Pin|LED_CC_Pin|LED_BB_Pin
                          |LED_AA_Pin|LED_D_Pin|LED_C_Pin|LED_B_Pin
                          |LED_A_Pin|D5_Pin|D6_Pin|LED_GG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0xc0>)
 8000888:	f000 ffa6 	bl	80017d8 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <HAL_MspInit+0x5c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x5c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_MspInit+0x60>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_MspInit+0x60>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <HAL_ADC_MspInit+0x7c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d129      	bne.n	8000984 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_ADC_MspInit+0x80>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_ADC_MspInit+0x80>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_ADC_MspInit+0x80>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_ADC_MspInit+0x80>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_ADC_MspInit+0x80>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_ADC_MspInit+0x80>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000960:	2301      	movs	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_ADC_MspInit+0x84>)
 8000970:	f000 ff32 	bl	80017d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2012      	movs	r0, #18
 800097a:	f000 fef6 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800097e:	2012      	movs	r0, #18
 8000980:	f000 ff0f 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40012400 	.word	0x40012400
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <HAL_RTC_MspInit+0x3c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d110      	bne.n	80009cc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009aa:	f001 f8a7 	bl	8001afc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_RTC_MspInit+0x40>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <HAL_RTC_MspInit+0x40>)
 80009b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_RTC_MspInit+0x40>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_RTC_MspInit+0x44>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40002800 	.word	0x40002800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	4242043c 	.word	0x4242043c

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f87f 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <ADC1_2_IRQHandler+0x10>)
 8000a36:	f000 fb4f 	bl	80010d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000002c 	.word	0x2000002c

08000a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	; (8000a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a76:	f7ff ffe5 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f002 fb29 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fd41 	bl	8000504 <main>
  bx lr
 8000a82:	4770      	bx	lr
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a8c:	08003180 	.word	0x08003180
  ldr r2, =_sbss
 8000a90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a94:	20000078 	.word	0x20000078

08000a98 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <CAN1_RX1_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 fe51 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff fef8 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fe69 	bl	80017be <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 fe31 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000074 	.word	0x20000074

08000b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000074 	.word	0x20000074

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0be      	b.n	8000d48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe92 	bl	8000910 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fc9b 	bl	8001528 <ADC_ConversionStop_Disable>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8099 	bne.w	8000d36 <HAL_ADC_Init+0x18e>
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8095 	bne.w	8000d36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	f043 0202 	orr.w	r2, r3, #2
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7b1b      	ldrb	r3, [r3, #12]
 8000c2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c40:	d003      	beq.n	8000c4a <HAL_ADC_Init+0xa2>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d102      	bne.n	8000c50 <HAL_ADC_Init+0xa8>
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	e000      	b.n	8000c52 <HAL_ADC_Init+0xaa>
 8000c50:	2300      	movs	r3, #0
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7d1b      	ldrb	r3, [r3, #20]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d119      	bne.n	8000c94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d109      	bne.n	8000c7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	035a      	lsls	r2, r3, #13
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	e00b      	b.n	8000c94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f043 0220 	orr.w	r2, r3, #32
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	f043 0201 	orr.w	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_ADC_Init+0x1a8>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc4:	d003      	beq.n	8000cce <HAL_ADC_Init+0x126>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d104      	bne.n	8000cd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	051b      	lsls	r3, r3, #20
 8000cd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_ADC_Init+0x1ac>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d10b      	bne.n	8000d14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	f023 0303 	bic.w	r3, r3, #3
 8000d0a:	f043 0201 	orr.w	r2, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d12:	e018      	b.n	8000d46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f023 0312 	bic.w	r3, r3, #18
 8000d1c:	f043 0210 	orr.w	r2, r3, #16
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	f043 0201 	orr.w	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d34:	e007      	b.n	8000d46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	f043 0210 	orr.w	r2, r3, #16
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	ffe1f7fd 	.word	0xffe1f7fd
 8000d54:	ff1f0efe 	.word	0xff1f0efe

08000d58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Start+0x1a>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e098      	b.n	8000ea4 <HAL_ADC_Start+0x14c>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fb7a 	bl	8001474 <ADC_Enable>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f040 8087 	bne.w	8000e9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a41      	ldr	r2, [pc, #260]	; (8000eac <HAL_ADC_Start+0x154>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d105      	bne.n	8000db6 <HAL_ADC_Start+0x5e>
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <HAL_ADC_Start+0x158>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d115      	bne.n	8000de2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d026      	beq.n	8000e1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000de0:	e01d      	b.n	8000e1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <HAL_ADC_Start+0x158>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d004      	beq.n	8000e02 <HAL_ADC_Start+0xaa>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <HAL_ADC_Start+0x154>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10d      	bne.n	8000e1e <HAL_ADC_Start+0xc6>
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_ADC_Start+0x158>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f023 0206 	bic.w	r2, r3, #6
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e36:	e002      	b.n	8000e3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f06f 0202 	mvn.w	r2, #2
 8000e4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e5e:	d113      	bne.n	8000e88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e64:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_ADC_Start+0x154>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d105      	bne.n	8000e76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_ADC_Start+0x158>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d108      	bne.n	8000e88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	e00c      	b.n	8000ea2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e003      	b.n	8000ea2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40012800 	.word	0x40012800
 8000eb0:	40012400 	.word	0x40012400

08000eb4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eca:	f7ff fe3f 	bl	8000b4c <HAL_GetTick>
 8000ece:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f043 0220 	orr.w	r2, r3, #32
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0d3      	b.n	800109e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d131      	bne.n	8000f68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d12a      	bne.n	8000f68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f12:	e021      	b.n	8000f58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1a:	d01d      	beq.n	8000f58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_ADC_PollForConversion+0x7e>
 8000f22:	f7ff fe13 	bl	8000b4c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d212      	bcs.n	8000f58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10b      	bne.n	8000f58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f043 0204 	orr.w	r2, r3, #4
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0a2      	b.n	800109e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0d6      	beq.n	8000f14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f66:	e070      	b.n	800104a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_ADC_PollForConversion+0x1f4>)
 8000f6a:	681c      	ldr	r4, [r3, #0]
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f001 fa8d 	bl	800248c <HAL_RCCEx_GetPeriphCLKFreq>
 8000f72:	4603      	mov	r3, r0
 8000f74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6919      	ldr	r1, [r3, #16]
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_ADC_PollForConversion+0x1f8>)
 8000f80:	400b      	ands	r3, r1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d118      	bne.n	8000fb8 <HAL_ADC_PollForConversion+0x104>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68d9      	ldr	r1, [r3, #12]
 8000f8c:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <HAL_ADC_PollForConversion+0x1fc>)
 8000f8e:	400b      	ands	r3, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d111      	bne.n	8000fb8 <HAL_ADC_PollForConversion+0x104>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6919      	ldr	r1, [r3, #16]
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <HAL_ADC_PollForConversion+0x200>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d108      	bne.n	8000fb4 <HAL_ADC_PollForConversion+0x100>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68d9      	ldr	r1, [r3, #12]
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <HAL_ADC_PollForConversion+0x204>)
 8000faa:	400b      	ands	r3, r1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADC_PollForConversion+0x100>
 8000fb0:	2314      	movs	r3, #20
 8000fb2:	e020      	b.n	8000ff6 <HAL_ADC_PollForConversion+0x142>
 8000fb4:	2329      	movs	r3, #41	; 0x29
 8000fb6:	e01e      	b.n	8000ff6 <HAL_ADC_PollForConversion+0x142>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6919      	ldr	r1, [r3, #16]
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <HAL_ADC_PollForConversion+0x200>)
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x120>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68d9      	ldr	r1, [r3, #12]
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_ADC_PollForConversion+0x204>)
 8000fce:	400b      	ands	r3, r1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x13c>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6919      	ldr	r1, [r3, #16]
 8000fda:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_ADC_PollForConversion+0x208>)
 8000fdc:	400b      	ands	r3, r1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x140>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <HAL_ADC_PollForConversion+0x208>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x140>
 8000ff0:	2354      	movs	r3, #84	; 0x54
 8000ff2:	e000      	b.n	8000ff6 <HAL_ADC_PollForConversion+0x142>
 8000ff4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ffc:	e021      	b.n	8001042 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d01a      	beq.n	800103c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_ADC_PollForConversion+0x168>
 800100c:	f7ff fd9e 	bl	8000b4c <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d20f      	bcs.n	800103c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d90b      	bls.n	800103c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f043 0204 	orr.w	r2, r3, #4
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e030      	b.n	800109e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8d9      	bhi.n	8000ffe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f06f 0212 	mvn.w	r2, #18
 8001052:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800106a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800106e:	d115      	bne.n	800109c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000000 	.word	0x20000000
 80010ac:	24924924 	.word	0x24924924
 80010b0:	00924924 	.word	0x00924924
 80010b4:	12492492 	.word	0x12492492
 80010b8:	00492492 	.word	0x00492492
 80010bc:	00249249 	.word	0x00249249

080010c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	d140      	bne.n	8001170 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d139      	bne.n	8001170 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800111e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001122:	d11d      	bne.n	8001160 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001128:	2b00      	cmp	r3, #0
 800112a:	d119      	bne.n	8001160 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0220 	bic.w	r2, r2, #32
 800113a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f87c 	bl	800125e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f06f 0212 	mvn.w	r2, #18
 800116e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	2b80      	cmp	r3, #128	; 0x80
 800117c:	d14f      	bne.n	800121e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b04      	cmp	r3, #4
 800118a:	d148      	bne.n	800121e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80011ae:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80011b2:	d012      	beq.n	80011da <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d125      	bne.n	800120e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011d0:	d11d      	bne.n	800120e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f9cb 	bl	80015aa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 020c 	mvn.w	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	d114      	bne.n	8001256 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d10d      	bne.n	8001256 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f812 	bl	8001270 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0201 	mvn.w	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
	...

08001284 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x20>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0dc      	b.n	800145e <HAL_ADC_ConfigChannel+0x1da>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	d81c      	bhi.n	80012ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	221f      	movs	r2, #31
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b05      	subs	r3, #5
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34
 80012ec:	e03c      	b.n	8001368 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d81c      	bhi.n	8001330 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b23      	subs	r3, #35	; 0x23
 8001308:	221f      	movs	r2, #31
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	4019      	ands	r1, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	3b23      	subs	r3, #35	; 0x23
 8001322:	fa00 f203 	lsl.w	r2, r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
 800132e:	e01b      	b.n	8001368 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	3b41      	subs	r3, #65	; 0x41
 8001342:	221f      	movs	r2, #31
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4019      	ands	r1, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b41      	subs	r3, #65	; 0x41
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d91c      	bls.n	80013aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68d9      	ldr	r1, [r3, #12]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	3b1e      	subs	r3, #30
 8001382:	2207      	movs	r2, #7
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6898      	ldr	r0, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	3b1e      	subs	r3, #30
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e019      	b.n	80013de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6919      	ldr	r1, [r3, #16]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	2207      	movs	r2, #7
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4019      	ands	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6898      	ldr	r0, [r3, #8]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d003      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ea:	2b11      	cmp	r3, #17
 80013ec:	d132      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_ADC_ConfigChannel+0x1e4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d125      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d126      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001414:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b10      	cmp	r3, #16
 800141c:	d11a      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_ADC_ConfigChannel+0x1e8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <HAL_ADC_ConfigChannel+0x1ec>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	0c9a      	lsrs	r2, r3, #18
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001434:	e002      	b.n	800143c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3b01      	subs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x1b2>
 8001442:	e007      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f043 0220 	orr.w	r2, r3, #32
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40012400 	.word	0x40012400
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d040      	beq.n	8001514 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <ADC_Enable+0xac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <ADC_Enable+0xb0>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b0:	e002      	b.n	80014b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014be:	f7ff fb45 	bl	8000b4c <HAL_GetTick>
 80014c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	e01f      	b.n	8001506 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014c6:	f7ff fb41 	bl	8000b4c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d918      	bls.n	8001506 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d011      	beq.n	8001506 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e007      	b.n	8001516 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d1d8      	bne.n	80014c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d12e      	bne.n	80015a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001552:	f7ff fafb 	bl	8000b4c <HAL_GetTick>
 8001556:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001558:	e01b      	b.n	8001592 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800155a:	f7ff faf7 	bl	8000b4c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d914      	bls.n	8001592 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10d      	bne.n	8001592 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e007      	b.n	80015a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d0dc      	beq.n	800155a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e148      	b.n	8001a7e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ec:	2201      	movs	r2, #1
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8137 	bne.w	8001a78 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4aa3      	ldr	r2, [pc, #652]	; (8001a9c <HAL_GPIO_Init+0x2c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d05e      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001814:	4aa1      	ldr	r2, [pc, #644]	; (8001a9c <HAL_GPIO_Init+0x2c4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d875      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800181a:	4aa1      	ldr	r2, [pc, #644]	; (8001aa0 <HAL_GPIO_Init+0x2c8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d058      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001820:	4a9f      	ldr	r2, [pc, #636]	; (8001aa0 <HAL_GPIO_Init+0x2c8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d86f      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001826:	4a9f      	ldr	r2, [pc, #636]	; (8001aa4 <HAL_GPIO_Init+0x2cc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d052      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 800182c:	4a9d      	ldr	r2, [pc, #628]	; (8001aa4 <HAL_GPIO_Init+0x2cc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d869      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001832:	4a9d      	ldr	r2, [pc, #628]	; (8001aa8 <HAL_GPIO_Init+0x2d0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d04c      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001838:	4a9b      	ldr	r2, [pc, #620]	; (8001aa8 <HAL_GPIO_Init+0x2d0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d863      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800183e:	4a9b      	ldr	r2, [pc, #620]	; (8001aac <HAL_GPIO_Init+0x2d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d046      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001844:	4a99      	ldr	r2, [pc, #612]	; (8001aac <HAL_GPIO_Init+0x2d4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d85d      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d82a      	bhi.n	80018a4 <HAL_GPIO_Init+0xcc>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d859      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_GPIO_Init+0x80>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018bf 	.word	0x080018bf
 8001864:	08001901 	.word	0x08001901
 8001868:	08001907 	.word	0x08001907
 800186c:	08001907 	.word	0x08001907
 8001870:	08001907 	.word	0x08001907
 8001874:	08001907 	.word	0x08001907
 8001878:	08001907 	.word	0x08001907
 800187c:	08001907 	.word	0x08001907
 8001880:	08001907 	.word	0x08001907
 8001884:	08001907 	.word	0x08001907
 8001888:	08001907 	.word	0x08001907
 800188c:	08001907 	.word	0x08001907
 8001890:	08001907 	.word	0x08001907
 8001894:	08001907 	.word	0x08001907
 8001898:	08001907 	.word	0x08001907
 800189c:	080018b5 	.word	0x080018b5
 80018a0:	080018c9 	.word	0x080018c9
 80018a4:	4a82      	ldr	r2, [pc, #520]	; (8001ab0 <HAL_GPIO_Init+0x2d8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018aa:	e02c      	b.n	8001906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e029      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3304      	adds	r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e024      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	3308      	adds	r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e01f      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	330c      	adds	r3, #12
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e01a      	b.n	8001908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018da:	2304      	movs	r3, #4
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e013      	b.n	8001908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	611a      	str	r2, [r3, #16]
          break;
 80018f2:	e009      	b.n	8001908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	615a      	str	r2, [r3, #20]
          break;
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x130>
          break;
 8001906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d801      	bhi.n	8001912 <HAL_GPIO_Init+0x13a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	e001      	b.n	8001916 <HAL_GPIO_Init+0x13e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d802      	bhi.n	8001924 <HAL_GPIO_Init+0x14c>
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0x152>
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	3b08      	subs	r3, #8
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	210f      	movs	r1, #15
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8090 	beq.w	8001a78 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001958:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x2e0>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1e0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1d8>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b8:	2300      	movs	r3, #0
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ca:	493b      	ldr	r1, [pc, #236]	; (8001ab8 <HAL_GPIO_Init+0x2e0>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4933      	ldr	r1, [pc, #204]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	492d      	ldr	r1, [pc, #180]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4929      	ldr	r1, [pc, #164]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4923      	ldr	r1, [pc, #140]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491f      	ldr	r1, [pc, #124]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4915      	ldr	r1, [pc, #84]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f aeaf 	bne.w	80017ec <HAL_GPIO_Init+0x14>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	372c      	adds	r7, #44	; 0x2c
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	420e0020 	.word	0x420e0020

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e26c      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8087 	beq.w	8001c42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b34:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d00c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b40:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d112      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
 8001b4c:	4b8c      	ldr	r3, [pc, #560]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d10b      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5a:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x12c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d168      	bne.n	8001c40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e246      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x76>
 8001b7c:	4b80      	ldr	r3, [pc, #512]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a7f      	ldr	r2, [pc, #508]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e02e      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x98>
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7a      	ldr	r2, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a77      	ldr	r2, [pc, #476]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xbc>
 8001bb6:	4b72      	ldr	r3, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a71      	ldr	r2, [pc, #452]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001bd0:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6a      	ldr	r2, [pc, #424]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a67      	ldr	r2, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe ffac 	bl	8000b4c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7fe ffa8 	bl	8000b4c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1fa      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe4>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff98 	bl	8000b4c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7fe ff94 	bl	8000b4c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1e6      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x10c>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5a:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x18c>
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x176>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1ba      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4939      	ldr	r1, [pc, #228]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	e03a      	b.n	8001d16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_RCC_OscConfig+0x270>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe ff4d 	bl	8000b4c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7fe ff49 	bl	8000b4c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e19b      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4927      	ldr	r1, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_RCC_OscConfig+0x270>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe ff2c 	bl	8000b4c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ff28 	bl	8000b4c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e17a      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03a      	beq.n	8001d98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d019      	beq.n	8001d5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7fe ff0c 	bl	8000b4c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7fe ff08 	bl	8000b4c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e15a      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f000 fac4 	bl	80022e4 <RCC_Delay>
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_OscConfig+0x274>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7fe fef2 	bl	8000b4c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6a:	e00f      	b.n	8001d8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7fe feee 	bl	8000b4c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d908      	bls.n	8001d8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e140      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	42420000 	.word	0x42420000
 8001d88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	4b9e      	ldr	r3, [pc, #632]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e9      	bne.n	8001d6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a6 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4b97      	ldr	r3, [pc, #604]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b94      	ldr	r3, [pc, #592]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a93      	ldr	r2, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]
 8001dc2:	4b91      	ldr	r3, [pc, #580]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b8e      	ldr	r3, [pc, #568]	; (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a8a      	ldr	r2, [pc, #552]	; (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7fe feaf 	bl	8000b4c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe feab 	bl	8000b4c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b64      	cmp	r3, #100	; 0x64
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0fd      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b81      	ldr	r3, [pc, #516]	; (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x312>
 8001e18:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e02d      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x334>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	e01c      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x356>
 8001e50:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a6c      	ldr	r2, [pc, #432]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a69      	ldr	r2, [pc, #420]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e00b      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	4b67      	ldr	r3, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a66      	ldr	r2, [pc, #408]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	4b64      	ldr	r3, [pc, #400]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a63      	ldr	r2, [pc, #396]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d015      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fe5f 	bl	8000b4c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fe5b 	bl	8000b4c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0ab      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ee      	beq.n	8001e92 <HAL_RCC_OscConfig+0x37e>
 8001eb4:	e014      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fe49 	bl	8000b4c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fe45 	bl	8000b4c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e095      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ee      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d105      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8081 	beq.w	8001ffe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d061      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d146      	bne.n	8001f9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_RCC_OscConfig+0x4fc>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe19 	bl	8000b4c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fe15 	bl	8000b4c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e067      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d108      	bne.n	8001f58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	492d      	ldr	r1, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a19      	ldr	r1, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	4927      	ldr	r1, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x4fc>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fde9 	bl	8000b4c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fde5 	bl	8000b4c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e037      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x46a>
 8001f9c:	e02f      	b.n	8001ffe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_RCC_OscConfig+0x4fc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fdd2 	bl	8000b4c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fdce 	bl	8000b4c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e020      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x498>
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e013      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	42420060 	.word	0x42420060

08002014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d0      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d910      	bls.n	8002058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 0207 	bic.w	r2, r3, #7
 800203e:	4965      	ldr	r1, [pc, #404]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002092:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d040      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e073      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4936      	ldr	r1, [pc, #216]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe fd22 	bl	8000b4c <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fd1e 	bl	8000b4c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e053      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d210      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1cc>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fc80 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003160 	.word	0x08003160
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b490      	push	{r4, r7}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f0:	1d3c      	adds	r4, r7, #4
 80021f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f8:	f240 2301 	movw	r3, #513	; 0x201
 80021fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x46>
 8002226:	e02d      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222a:	623b      	str	r3, [r7, #32]
      break;
 800222c:	e02d      	b.n	800228a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	0c9b      	lsrs	r3, r3, #18
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223a:	4413      	add	r3, r2
 800223c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002240:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_GetSysClockFreq+0xb4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0c5b      	lsrs	r3, r3, #17
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800225a:	4413      	add	r3, r2
 800225c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002260:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002266:	fb02 f203 	mul.w	r2, r2, r3
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	e004      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	623b      	str	r3, [r7, #32]
      break;
 8002282:	e002      	b.n	800228a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002286:	623b      	str	r3, [r7, #32]
      break;
 8002288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228a:	6a3b      	ldr	r3, [r7, #32]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bc90      	pop	{r4, r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	08003140 	.word	0x08003140
 800229c:	40021000 	.word	0x40021000
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	003d0900 	.word	0x003d0900

080022a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	20000000 	.word	0x20000000

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff fff2 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08003170 	.word	0x08003170

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000000 	.word	0x20000000
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d07d      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a4b      	ldr	r2, [pc, #300]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d118      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fe fbe4 	bl	8000b4c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe fbe0 	bl	8000b4c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e06d      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02e      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d027      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023da:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fbaf 	bl	8000b4c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fbab 	bl	8000b4c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e036      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4917      	ldr	r1, [pc, #92]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	4313      	orrs	r3, r2
 8002424:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	42420440 	.word	0x42420440

0800248c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002494:	4b5a      	ldr	r3, [pc, #360]	; (8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002496:	f107 040c 	add.w	r4, r7, #12
 800249a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a0:	f240 2301 	movw	r3, #513	; 0x201
 80024a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	f200 8091 	bhi.w	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d04c      	beq.n	8002568 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d07c      	beq.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024d4:	e089      	b.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8082 	beq.w	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024f6:	4413      	add	r3, r2
 80024f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024fc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002508:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0c5b      	lsrs	r3, r3, #17
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002516:	4413      	add	r3, r2
 8002518:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00d      	beq.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002528:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002538:	e004      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002550:	d102      	bne.n	8002558 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002556:	e04a      	b.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002566:	e042      	b.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d108      	bne.n	800258c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
 800258a:	e01f      	b.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002596:	d109      	bne.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80025a4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025aa:	e00f      	b.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b6:	d11c      	bne.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d016      	beq.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80025c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025ca:	e012      	b.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80025cc:	e011      	b.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025ce:	f7ff fe75 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0b9b      	lsrs	r3, r3, #14
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025e8:	e004      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025f2:	bf00      	nop
    }
  }
  return (frequency);
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3734      	adds	r7, #52	; 0x34
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	08003150 	.word	0x08003150
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	003d0900 	.word	0x003d0900
 8002610:	aaaaaaab 	.word	0xaaaaaaab

08002614 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e084      	b.n	8002734 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7c5b      	ldrb	r3, [r3, #17]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f9ac 	bl	8000998 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 faa0 	bl	8002b8c <HAL_RTC_WaitForSynchro>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2204      	movs	r2, #4
 8002656:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e06b      	b.n	8002734 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb59 	bl	8002d14 <RTC_EnterInitMode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2204      	movs	r2, #4
 800266c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e060      	b.n	8002734 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0207 	bic.w	r2, r2, #7
 8002680:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RTC_Init+0x128>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a2b      	ldr	r2, [pc, #172]	; (800273c <HAL_RTC_Init+0x128>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RTC_Init+0x128>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4926      	ldr	r1, [pc, #152]	; (800273c <HAL_RTC_Init+0x128>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d003      	beq.n	80026ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e00e      	b.n	80026d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff fee6 	bl	800248c <HAL_RCCEx_GetPeriphCLKFreq>
 80026c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e030      	b.n	8002734 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 010f 	bic.w	r1, r3, #15
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	0c1a      	lsrs	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	b291      	uxth	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb2d 	bl	8002d64 <RTC_ExitInitMode>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00c      	b.n	8002734 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40006c00 	.word	0x40006c00

08002740 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RTC_SetTime+0x20>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e080      	b.n	8002866 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	7c1b      	ldrb	r3, [r3, #16]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_RTC_SetTime+0x30>
 800276c:	2302      	movs	r3, #2
 800276e:	e07a      	b.n	8002866 <HAL_RTC_SetTime+0x126>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800278c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	4619      	mov	r1, r3
 8002796:	460b      	mov	r3, r1
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800279e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027a4:	4413      	add	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e01e      	b.n	80027e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fb1d 	bl	8002dee <RTC_Bcd2ToByte>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fb12 	bl	8002dee <RTC_Bcd2ToByte>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fb06 	bl	8002dee <RTC_Bcd2ToByte>
 80027e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027e4:	4423      	add	r3, r4
 80027e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027e8:	6979      	ldr	r1, [r7, #20]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fa2b 	bl	8002c46 <RTC_WriteTimeCounter>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2204      	movs	r2, #4
 80027fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e02f      	b.n	8002866 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0205 	bic.w	r2, r2, #5
 8002814:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa3c 	bl	8002c94 <RTC_ReadAlarmCounter>
 800281c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d018      	beq.n	8002858 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	429a      	cmp	r2, r3
 800282c:	d214      	bcs.n	8002858 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002834:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002838:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fa42 	bl	8002cc6 <RTC_WriteAlarmCounter>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2204      	movs	r2, #4
 800284c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e006      	b.n	8002866 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
	...

08002870 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_RTC_GetTime+0x28>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b5      	b.n	8002a08 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0ac      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f999 	bl	8002be6 <RTC_ReadTimeCounter>
 80028b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0adb      	lsrs	r3, r3, #11
 80028c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_RTC_GetTime+0x1a4>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028e8:	fba2 1203 	umull	r1, r2, r2, r3
 80028ec:	0ad2      	lsrs	r2, r2, #11
 80028ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028f2:	fb01 f202 	mul.w	r2, r1, r2
 80028f6:	1a9a      	subs	r2, r3, r2
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RTC_GetTime+0x1a4>)
 80028fa:	fba3 1302 	umull	r1, r3, r3, r2
 80028fe:	0959      	lsrs	r1, r3, #5
 8002900:	460b      	mov	r3, r1
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a5b      	subs	r3, r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	1ad1      	subs	r1, r2, r3
 800290a:	b2ca      	uxtb	r2, r1
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b17      	cmp	r3, #23
 8002914:	d955      	bls.n	80029c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a3f      	ldr	r2, [pc, #252]	; (8002a18 <HAL_RTC_GetTime+0x1a8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002922:	6939      	ldr	r1, [r7, #16]
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RTC_GetTime+0x1a8>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	091a      	lsrs	r2, r3, #4
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1aca      	subs	r2, r1, r3
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f9a9 	bl	8002c94 <RTC_ReadAlarmCounter>
 8002942:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d008      	beq.n	800295e <HAL_RTC_GetTime+0xee>
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d904      	bls.n	800295e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e002      	b.n	8002964 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <HAL_RTC_GetTime+0x1ac>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f966 	bl	8002c46 <RTC_WriteTimeCounter>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e041      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d00c      	beq.n	80029a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f995 	bl	8002cc6 <RTC_WriteAlarmCounter>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e030      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80029a6:	69f9      	ldr	r1, [r7, #28]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f98c 	bl	8002cc6 <RTC_WriteAlarmCounter>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e027      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fa34 	bl	8002e28 <RTC_DateUpdate>
 80029c0:	e003      	b.n	80029ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01a      	beq.n	8002a06 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f9ed 	bl	8002db4 <RTC_ByteToBcd2>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f9e4 	bl	8002db4 <RTC_ByteToBcd2>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f9db 	bl	8002db4 <RTC_ByteToBcd2>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	91a2b3c5 	.word	0x91a2b3c5
 8002a14:	88888889 	.word	0x88888889
 8002a18:	aaaaaaab 	.word	0xaaaaaaab
 8002a1c:	00015180 	.word	0x00015180

08002a20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RTC_SetDate+0x24>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e097      	b.n	8002b78 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	7c1b      	ldrb	r3, [r3, #16]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RTC_SetDate+0x34>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e091      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	78da      	ldrb	r2, [r3, #3]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	785a      	ldrb	r2, [r3, #1]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	789a      	ldrb	r2, [r3, #2]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	739a      	strb	r2, [r3, #14]
 8002a7e:	e01a      	b.n	8002ab6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	78db      	ldrb	r3, [r3, #3]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f9b2 	bl	8002dee <RTC_Bcd2ToByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f9a9 	bl	8002dee <RTC_Bcd2ToByte>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f9a0 	bl	8002dee <RTC_Bcd2ToByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	7bdb      	ldrb	r3, [r3, #15]
 8002aba:	4618      	mov	r0, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	7b59      	ldrb	r1, [r3, #13]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	7b9b      	ldrb	r3, [r3, #14]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f000 fa8b 	bl	8002fe0 <RTC_WeekDayNum>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	7b1a      	ldrb	r2, [r3, #12]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f883 	bl	8002be6 <RTC_ReadTimeCounter>
 8002ae0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_RTC_SetDate+0x160>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0adb      	lsrs	r3, r3, #11
 8002aec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b18      	cmp	r3, #24
 8002af2:	d93a      	bls.n	8002b6a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_RTC_SetDate+0x164>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_RTC_SetDate+0x168>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b0a:	69f9      	ldr	r1, [r7, #28]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f89a 	bl	8002c46 <RTC_WriteTimeCounter>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e027      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f8b3 	bl	8002c94 <RTC_ReadAlarmCounter>
 8002b2e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d018      	beq.n	8002b6a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d214      	bcs.n	8002b6a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002b46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b4a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f8b9 	bl	8002cc6 <RTC_WriteAlarmCounter>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e006      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	91a2b3c5 	.word	0x91a2b3c5
 8002b84:	aaaaaaab 	.word	0xaaaaaaab
 8002b88:	00015180 	.word	0x00015180

08002b8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01d      	b.n	8002bde <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002bb2:	f7fd ffcb 	bl	8000b4c <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bb8:	e009      	b.n	8002bce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bba:	f7fd ffc7 	bl	8000b4c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc8:	d901      	bls.n	8002bce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e007      	b.n	8002bde <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	827b      	strh	r3, [r7, #18]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	823b      	strh	r3, [r7, #16]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002c16:	8a7a      	ldrh	r2, [r7, #18]
 8002c18:	8a3b      	ldrh	r3, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d008      	beq.n	8002c30 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002c1e:	8a3b      	ldrh	r3, [r7, #16]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e004      	b.n	8002c3a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002c30:	8a7b      	ldrh	r3, [r7, #18]
 8002c32:	041a      	lsls	r2, r3, #16
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002c3a:	697b      	ldr	r3, [r7, #20]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f85d 	bl	8002d14 <RTC_EnterInitMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e011      	b.n	8002c8a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	0c12      	lsrs	r2, r2, #16
 8002c6e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b292      	uxth	r2, r2
 8002c78:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f872 	bl	8002d64 <RTC_ExitInitMode>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	81fb      	strh	r3, [r7, #14]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	89bb      	ldrh	r3, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f81d 	bl	8002d14 <RTC_EnterInitMode>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e011      	b.n	8002d0a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	0c12      	lsrs	r2, r2, #16
 8002cee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f832 	bl	8002d64 <RTC_ExitInitMode>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002d20:	f7fd ff14 	bl	8000b4c <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d26:	e009      	b.n	8002d3c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d28:	f7fd ff10 	bl	8000b4c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d36:	d901      	bls.n	8002d3c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e00f      	b.n	8002d5c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ee      	beq.n	8002d28 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0210 	orr.w	r2, r2, #16
 8002d58:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0210 	bic.w	r2, r2, #16
 8002d7e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d80:	f7fd fee4 	bl	8000b4c <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d86:	e009      	b.n	8002d9c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d88:	f7fd fee0 	bl	8000b4c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d96:	d901      	bls.n	8002d9c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e007      	b.n	8002dac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ee      	beq.n	8002d88 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002dc2:	e005      	b.n	8002dd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	3b0a      	subs	r3, #10
 8002dce:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	d8f6      	bhi.n	8002dc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b2db      	uxtb	r3, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2db      	uxtb	r3, r3
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7bdb      	ldrb	r3, [r3, #15]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7b5b      	ldrb	r3, [r3, #13]
 8002e4c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7b9b      	ldrb	r3, [r3, #14]
 8002e52:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e06f      	b.n	8002f3a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d011      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d00e      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d00b      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	d008      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d005      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d002      	beq.n	8002e84 <RTC_DateUpdate+0x5c>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d117      	bne.n	8002eb4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b1e      	cmp	r3, #30
 8002e88:	d803      	bhi.n	8002e92 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e90:	e050      	b.n	8002f34 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d005      	beq.n	8002ea4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002ea2:	e047      	b.n	8002f34 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
          year++;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002eb2:	e03f      	b.n	8002f34 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d008      	beq.n	8002ecc <RTC_DateUpdate+0xa4>
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d005      	beq.n	8002ecc <RTC_DateUpdate+0xa4>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d002      	beq.n	8002ecc <RTC_DateUpdate+0xa4>
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b0b      	cmp	r3, #11
 8002eca:	d10c      	bne.n	8002ee6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b1d      	cmp	r3, #29
 8002ed0:	d803      	bhi.n	8002eda <RTC_DateUpdate+0xb2>
      {
        day++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ed8:	e02c      	b.n	8002f34 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3301      	adds	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ee4:	e026      	b.n	8002f34 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d123      	bne.n	8002f34 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b1b      	cmp	r3, #27
 8002ef0:	d803      	bhi.n	8002efa <RTC_DateUpdate+0xd2>
      {
        day++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e01c      	b.n	8002f34 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b1c      	cmp	r3, #28
 8002efe:	d111      	bne.n	8002f24 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f839 	bl	8002f7c <RTC_IsLeapYear>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e00d      	b.n	8002f34 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e007      	b.n	8002f34 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b1d      	cmp	r3, #29
 8002f28:	d104      	bne.n	8002f34 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3301      	adds	r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d38b      	bcc.n	8002e5a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6978      	ldr	r0, [r7, #20]
 8002f66:	f000 f83b 	bl	8002fe0 <RTC_WeekDayNum>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	731a      	strb	r2, [r3, #12]
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e01d      	b.n	8002fd2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <RTC_IsLeapYear+0x60>)
 8002f9a:	fba2 1203 	umull	r1, r2, r2, r3
 8002f9e:	0952      	lsrs	r2, r2, #5
 8002fa0:	2164      	movs	r1, #100	; 0x64
 8002fa2:	fb01 f202 	mul.w	r2, r1, r2
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00f      	b.n	8002fd2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <RTC_IsLeapYear+0x60>)
 8002fb6:	fba2 1203 	umull	r1, r2, r2, r3
 8002fba:	09d2      	lsrs	r2, r2, #7
 8002fbc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002fc0:	fb01 f202 	mul.w	r2, r1, r2
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002fd0:	2300      	movs	r3, #0
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	51eb851f 	.word	0x51eb851f

08002fe0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
 8002fec:	4613      	mov	r3, r2
 8002fee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ffe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d82d      	bhi.n	8003062 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <RTC_WeekDayNum+0xe4>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	085a      	lsrs	r2, r3, #1
 800301a:	78bb      	ldrb	r3, [r7, #2]
 800301c:	441a      	add	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	441a      	add	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	3b01      	subs	r3, #1
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	4926      	ldr	r1, [pc, #152]	; (80030c8 <RTC_WeekDayNum+0xe8>)
 8003030:	fba1 1303 	umull	r1, r3, r1, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	1ad2      	subs	r2, r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3b01      	subs	r3, #1
 800303c:	4922      	ldr	r1, [pc, #136]	; (80030c8 <RTC_WeekDayNum+0xe8>)
 800303e:	fba1 1303 	umull	r1, r3, r1, r3
 8003042:	09db      	lsrs	r3, r3, #7
 8003044:	4413      	add	r3, r2
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <RTC_WeekDayNum+0xec>)
 800304a:	fba3 1302 	umull	r1, r3, r3, r2
 800304e:	1ad1      	subs	r1, r2, r3
 8003050:	0849      	lsrs	r1, r1, #1
 8003052:	440b      	add	r3, r1
 8003054:	0899      	lsrs	r1, r3, #2
 8003056:	460b      	mov	r3, r1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a5b      	subs	r3, r3, r1
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e029      	b.n	80030b6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <RTC_WeekDayNum+0xe4>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	085a      	lsrs	r2, r3, #1
 8003076:	78bb      	ldrb	r3, [r7, #2]
 8003078:	441a      	add	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	441a      	add	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4910      	ldr	r1, [pc, #64]	; (80030c8 <RTC_WeekDayNum+0xe8>)
 8003088:	fba1 1303 	umull	r1, r3, r1, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	1ad2      	subs	r2, r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	490d      	ldr	r1, [pc, #52]	; (80030c8 <RTC_WeekDayNum+0xe8>)
 8003094:	fba1 1303 	umull	r1, r3, r1, r3
 8003098:	09db      	lsrs	r3, r3, #7
 800309a:	4413      	add	r3, r2
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <RTC_WeekDayNum+0xec>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	1ad1      	subs	r1, r2, r3
 80030a6:	0849      	lsrs	r1, r1, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	0899      	lsrs	r1, r3, #2
 80030ac:	460b      	mov	r3, r1
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a5b      	subs	r3, r3, r1
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	b2db      	uxtb	r3, r3
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	38e38e39 	.word	0x38e38e39
 80030c8:	51eb851f 	.word	0x51eb851f
 80030cc:	24924925 	.word	0x24924925

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	2600      	movs	r6, #0
 80030d4:	4d0c      	ldr	r5, [pc, #48]	; (8003108 <__libc_init_array+0x38>)
 80030d6:	4c0d      	ldr	r4, [pc, #52]	; (800310c <__libc_init_array+0x3c>)
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	42a6      	cmp	r6, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	f000 f822 	bl	8003128 <_init>
 80030e4:	2600      	movs	r6, #0
 80030e6:	4d0a      	ldr	r5, [pc, #40]	; (8003110 <__libc_init_array+0x40>)
 80030e8:	4c0a      	ldr	r4, [pc, #40]	; (8003114 <__libc_init_array+0x44>)
 80030ea:	1b64      	subs	r4, r4, r5
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f8:	4798      	blx	r3
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003102:	4798      	blx	r3
 8003104:	3601      	adds	r6, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	08003178 	.word	0x08003178
 800310c:	08003178 	.word	0x08003178
 8003110:	08003178 	.word	0x08003178
 8003114:	0800317c 	.word	0x0800317c

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <_init>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr

08003134 <_fini>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr
