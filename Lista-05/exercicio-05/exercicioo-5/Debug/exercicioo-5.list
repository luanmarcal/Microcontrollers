
exercicioo-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000462c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004770  08004770  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004778  08004778  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  0800478c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800478c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d998  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c91  00000000  00000000  0002d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b254  00000000  00000000  00030838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc13  00000000  00000000  0004ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd75  00000000  00000000  0005769f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  00107468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080046d0 	.word	0x080046d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080046d0 	.word	0x080046d0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t *) frase, 1);
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_UART_RxCpltCallback+0x2c>)
 8000628:	2201      	movs	r2, #1
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fe58 	bl	80022e0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase, 1);
 8000630:	4904      	ldr	r1, [pc, #16]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_UART_RxCpltCallback+0x2c>)
 8000634:	2201      	movs	r2, #1
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fd96 	bl	8002168 <HAL_UART_Transmit_IT>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000048 	.word	0x20000048
 8000648:	20000068 	.word	0x20000068

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 f9ca 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f81c 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f8c6 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f876 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *) envfrase, 1);
 8000660:	4908      	ldr	r1, [pc, #32]	; (8000684 <main+0x38>)
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0x3c>)
 8000664:	2201      	movs	r2, #1
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fe3a 	bl	80022e0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase, 1);
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <main+0x40>)
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <main+0x3c>)
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fd78 	bl	8002168 <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 8000678:	23fa      	movs	r3, #250	; 0xfa
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fa39 	bl	8000af4 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase, 1);
 8000682:	e7f3      	b.n	800066c <main+0x20>
 8000684:	20000028 	.word	0x20000028
 8000688:	20000068 	.word	0x20000068
 800068c:	20000048 	.word	0x20000048

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b095      	sub	sp, #84	; 0x54
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	233c      	movs	r3, #60	; 0x3c
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f004 f80d 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f004 f806 	bl	80046c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fd67 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006cc:	0021      	movs	r1, r4
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2202      	movs	r2, #2
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2208      	movs	r2, #8
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0292      	lsls	r2, r2, #10
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0492      	lsls	r2, r2, #18
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0592      	lsls	r2, r2, #22
 8000708:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	187b      	adds	r3, r7, r1
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fd89 	bl	8001224 <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000716:	f000 f87d 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2202      	movs	r2, #2
 8000724:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2102      	movs	r1, #2
 8000736:	0018      	movs	r0, r3
 8000738:	f001 f8da 	bl	80018f0 <HAL_RCC_ClockConfig>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000740:	f000 f868 	bl	8000814 <Error_Handler>
  }
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b015      	add	sp, #84	; 0x54
 800074a:	bd90      	pop	{r4, r7, pc}

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_USART2_UART_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000758:	2296      	movs	r2, #150	; 0x96
 800075a:	0192      	lsls	r2, r2, #6
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fc90 	bl	80020bc <HAL_UART_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 f838 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 fe85 	bl	80044b8 <HAL_UARTEx_SetTxFifoThreshold>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b2:	f000 f82f 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 febc 	bl	8004538 <HAL_UARTEx_SetRxFifoThreshold>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 f826 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 fe3a 	bl	8004444 <HAL_UARTEx_DisableFifoMode>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f81e 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000068 	.word	0x20000068
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_GPIO_Init+0x28>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_GPIO_Init+0x28>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_GPIO_Init+0x28>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_MspInit+0x4c>)
 8000828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	641a      	str	r2, [r3, #64]	; 0x40
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x4c>)
 8000840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x4c>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_MspInit+0x4c>)
 800084e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800085a:	23c0      	movs	r3, #192	; 0xc0
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f96c 	bl	8000b3c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b09d      	sub	sp, #116	; 0x74
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	235c      	movs	r3, #92	; 0x5c
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f003 ff1c 	bl	80046c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	2410      	movs	r4, #16
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	234c      	movs	r3, #76	; 0x4c
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f003 ff14 	bl	80046c0 <memset>
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <HAL_UART_MspInit+0xc8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d146      	bne.n	8000930 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 f9c7 	bl	8001c44 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008ba:	f7ff ffab 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0289      	lsls	r1, r1, #10
 80008c8:	430a      	orrs	r2, r1
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	029b      	lsls	r3, r3, #10
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0xcc>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f2:	215c      	movs	r1, #92	; 0x5c
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2201      	movs	r2, #1
 8000910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	187a      	adds	r2, r7, r1
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 faca 	bl	8000eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	201c      	movs	r0, #28
 8000926:	f000 f9cb 	bl	8000cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800092a:	201c      	movs	r0, #28
 800092c:	f000 f9dd 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b01d      	add	sp, #116	; 0x74
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f8aa 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <USART2_LPUART2_IRQHandler+0x14>)
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fd22 	bl	80023c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000068 	.word	0x20000068

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f7ff fff6 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f003 fe59 	bl	8004678 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009c6:	f7ff fe41 	bl	800064c <main>

080009ca <LoopForever>:

LoopForever:
  b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	08004780 	.word	0x08004780
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	200000fc 	.word	0x200000fc

080009e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_COMP_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x3c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Init+0x3c>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	0049      	lsls	r1, r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 f810 	bl	8000a28 <HAL_InitTick>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff ff04 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_InitTick+0x88>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d02b      	beq.n	8000a98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0x8c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_InitTick+0x88>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb59 	bl	8000104 <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb54 	bl	8000104 <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f953 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d112      	bne.n	8000a8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d80a      	bhi.n	8000a84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 f922 	bl	8000cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_InitTick+0x90>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e00d      	b.n	8000aa0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e008      	b.n	8000aa0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e003      	b.n	8000aa0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b005      	add	sp, #20
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	18d2      	adds	r2, r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200000f8 	.word	0x200000f8

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	200000f8 	.word	0x200000f8

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fff0 	bl	8000ae0 <HAL_GetTick>
 8000b00:	0003      	movs	r3, r0
 8000b02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	001a      	movs	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	189b      	adds	r3, r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	f7ff ffe0 	bl	8000ae0 <HAL_GetTick>
 8000b20:	0002      	movs	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b004      	add	sp, #16
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40010000 	.word	0x40010000
 8000b64:	fffff9ff 	.word	0xfffff9ff

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7a:	d809      	bhi.n	8000b90 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	231f      	movs	r3, #31
 8000b84:	401a      	ands	r2, r3
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_EnableIRQ+0x30>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4091      	lsls	r1, r2
 8000b8c:	000a      	movs	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb0:	d828      	bhi.n	8000c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	589b      	ldr	r3, [r3, r2]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	400a      	ands	r2, r1
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	21ff      	movs	r1, #255	; 0xff
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	401a      	ands	r2, r3
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	2303      	movs	r3, #3
 8000bea:	4003      	ands	r3, r0
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	481f      	ldr	r0, [pc, #124]	; (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	33c0      	adds	r3, #192	; 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c02:	e031      	b.n	8000c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	400b      	ands	r3, r1
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3306      	adds	r3, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	; 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	; 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001c      	movs	r4, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	4023      	ands	r3, r4
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	3306      	adds	r3, #6
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	18c3      	adds	r3, r0, r3
 8000c64:	3304      	adds	r3, #4
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b003      	add	sp, #12
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	045b      	lsls	r3, r3, #17
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d301      	bcc.n	8000c90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e010      	b.n	8000cb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SysTick_Config+0x44>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	3a01      	subs	r2, #1
 8000c96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff ff7c 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x44>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff33 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ffaf 	bl	8000c78 <SysTick_Config>
 8000d1a:	0003      	movs	r3, r0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e04f      	b.n	8000dd6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2225      	movs	r2, #37	; 0x25
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d008      	beq.n	8000d54 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2204      	movs	r2, #4
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2224      	movs	r2, #36	; 0x24
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e040      	b.n	8000dd6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	210e      	movs	r1, #14
 8000d60:	438a      	bics	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6e:	491c      	ldr	r1, [pc, #112]	; (8000de0 <HAL_DMA_Abort+0xbc>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	438a      	bics	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	221c      	movs	r2, #28
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	2101      	movs	r1, #1
 8000d92:	4091      	lsls	r1, r2
 8000d94:	000a      	movs	r2, r1
 8000d96:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000da0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	490a      	ldr	r1, [pc, #40]	; (8000de0 <HAL_DMA_Abort+0xbc>)
 8000db6:	400a      	ands	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2225      	movs	r2, #37	; 0x25
 8000dc8:	2101      	movs	r1, #1
 8000dca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	fffffeff 	.word	0xfffffeff

08000de4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2225      	movs	r2, #37	; 0x25
 8000df8:	5c9b      	ldrb	r3, [r3, r2]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d006      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2204      	movs	r2, #4
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e048      	b.n	8000ea0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	210e      	movs	r1, #14
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e38:	491d      	ldr	r1, [pc, #116]	; (8000eb0 <HAL_DMA_Abort_IT+0xcc>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	221c      	movs	r2, #28
 8000e44:	401a      	ands	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	4910      	ldr	r1, [pc, #64]	; (8000eb0 <HAL_DMA_Abort_IT+0xcc>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2225      	movs	r2, #37	; 0x25
 8000e82:	2101      	movs	r1, #1
 8000e84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2224      	movs	r2, #36	; 0x24
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d004      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	0010      	movs	r0, r2
 8000e9e:	4798      	blx	r3
    }
  }
  return status;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	fffffeff 	.word	0xfffffeff

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	e14d      	b.n	8001160 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x28>
 8000eda:	e13e      	b.n	800115a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d005      	beq.n	8000ef4 <HAL_GPIO_Init+0x40>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d130      	bne.n	8000f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	2201      	movs	r2, #1
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d017      	beq.n	8000f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d123      	bne.n	8000fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	58d3      	ldr	r3, [r2, r3]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2207      	movs	r2, #7
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2107      	movs	r1, #7
 8000fca:	400b      	ands	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	6939      	ldr	r1, [r7, #16]
 8000fe4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	401a      	ands	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0x174>
 8001026:	e098      	b.n	800115a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3318      	adds	r3, #24
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	589b      	ldr	r3, [r3, r2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	429a      	cmp	r2, r3
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x1d6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a48      	ldr	r2, [pc, #288]	; (800117c <HAL_GPIO_Init+0x2c8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1d2>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a47      	ldr	r2, [pc, #284]	; (8001180 <HAL_GPIO_Init+0x2cc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1ce>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a46      	ldr	r2, [pc, #280]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1ca>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a45      	ldr	r2, [pc, #276]	; (8001188 <HAL_GPIO_Init+0x2d4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1c6>
 8001076:	2304      	movs	r3, #4
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x1d8>
 800107a:	2305      	movs	r3, #5
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x1d8>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x1d8>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x1d8>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x1d8>
 800108a:	2300      	movs	r3, #0
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	2103      	movs	r1, #3
 8001090:	400a      	ands	r2, r1
 8001092:	00d2      	lsls	r2, r2, #3
 8001094:	4093      	lsls	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800109c:	4936      	ldr	r1, [pc, #216]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3318      	adds	r3, #24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	58d3      	ldr	r3, [r2, r3]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	4013      	ands	r3, r2
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d0:	4929      	ldr	r1, [pc, #164]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 80010da:	2384      	movs	r3, #132	; 0x84
 80010dc:	58d3      	ldr	r3, [r2, r3]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 8001100:	2284      	movs	r2, #132	; 0x84
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	035b      	lsls	r3, r3, #13
 800111e:	4013      	ands	r3, r2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	039b      	lsls	r3, r3, #14
 8001148:	4013      	ands	r3, r2
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	40da      	lsrs	r2, r3
 8001168:	1e13      	subs	r3, r2, #0
 800116a:	d000      	beq.n	800116e <HAL_GPIO_Init+0x2ba>
 800116c:	e6aa      	b.n	8000ec4 <HAL_GPIO_Init+0x10>
  }
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021800 	.word	0x40021800
 800117c:	50000400 	.word	0x50000400
 8001180:	50000800 	.word	0x50000800
 8001184:	50000c00 	.word	0x50000c00
 8001188:	50001000 	.word	0x50001000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d11f      	bne.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	0013      	movs	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	189b      	adds	r3, r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4912      	ldr	r1, [pc, #72]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7fe ffa0 	bl	8000104 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	e008      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e001      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e009      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	401a      	ands	r2, r3
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d0ed      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40007000 	.word	0x40007000
 8001200:	fffff9ff 	.word	0xfffff9ff
 8001204:	20000000 	.word	0x20000000
 8001208:	000f4240 	.word	0x000f4240

0800120c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	23e0      	movs	r3, #224	; 0xe0
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4013      	ands	r3, r2
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f000 fb56 	bl	80018e4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x20>
 8001242:	e07d      	b.n	8001340 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001244:	4bc3      	ldr	r3, [pc, #780]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2238      	movs	r2, #56	; 0x38
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124e:	4bc1      	ldr	r3, [pc, #772]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2203      	movs	r2, #3
 8001254:	4013      	ands	r3, r2
 8001256:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b10      	cmp	r3, #16
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x40>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d002      	beq.n	800126a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b08      	cmp	r3, #8
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	4bba      	ldr	r3, [pc, #744]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x11a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d15f      	bne.n	800133e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f000 fb30 	bl	80018e4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	429a      	cmp	r2, r3
 800128e:	d107      	bne.n	80012a0 <HAL_RCC_OscConfig+0x7c>
 8001290:	4bb0      	ldr	r3, [pc, #704]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4baf      	ldr	r3, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0249      	lsls	r1, r1, #9
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e020      	b.n	80012e2 <HAL_RCC_OscConfig+0xbe>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	02db      	lsls	r3, r3, #11
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d10e      	bne.n	80012ca <HAL_RCC_OscConfig+0xa6>
 80012ac:	4ba9      	ldr	r3, [pc, #676]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4ba8      	ldr	r3, [pc, #672]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	02c9      	lsls	r1, r1, #11
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4ba6      	ldr	r3, [pc, #664]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4ba5      	ldr	r3, [pc, #660]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0249      	lsls	r1, r1, #9
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0xbe>
 80012ca:	4ba2      	ldr	r3, [pc, #648]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba1      	ldr	r3, [pc, #644]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012d0:	49a1      	ldr	r1, [pc, #644]	; (8001558 <HAL_RCC_OscConfig+0x334>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	4b9f      	ldr	r3, [pc, #636]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b9e      	ldr	r3, [pc, #632]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012dc:	499f      	ldr	r1, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d014      	beq.n	8001314 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fbf9 	bl	8000ae0 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fbf4 	bl	8000ae0 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2ee      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001306:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xd0>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fbe4 	bl	8000ae0 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff fbdf 	bl	8000ae0 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e2d9      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0xfa>
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_RCC_OscConfig+0x128>
 800134a:	e099      	b.n	8001480 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2238      	movs	r2, #56	; 0x38
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x148>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d002      	beq.n	8001372 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d135      	bne.n	80013de <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001372:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4013      	ands	r3, r2
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x166>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e2ac      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x33c>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	021a      	lsls	r2, r3, #8
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800139c:	430a      	orrs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x340>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	0019      	movs	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	4b67      	ldr	r3, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0adb      	lsrs	r3, r3, #11
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x344>)
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x348>)
 80013ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x34c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff fb29 	bl	8000a28 <HAL_InitTick>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d051      	beq.n	800147e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e282      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d030      	beq.n	8001448 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_RCC_OscConfig+0x340>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	0049      	lsls	r1, r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fb6a 	bl	8000ae0 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fb65 	bl	8000ae0 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e25f      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001424:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4013      	ands	r3, r2
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x33c>)
 8001436:	4013      	ands	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	021a      	lsls	r2, r3, #8
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800144e:	4949      	ldr	r1, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x350>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fb44 	bl	8000ae0 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fb3f 	bl	8000ae0 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e239      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4013      	ands	r3, r2
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x23a>
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	4013      	ands	r3, r2
 8001488:	d047      	beq.n	800151a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	; 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	2b18      	cmp	r3, #24
 8001494:	d10a      	bne.n	80014ac <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d03c      	beq.n	800151a <HAL_RCC_OscConfig+0x2f6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d138      	bne.n	800151a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e21b      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d019      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80014b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb0e 	bl	8000ae0 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fb09 	bl	8000ae0 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e203      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x2a6>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80014ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff faf4 	bl	8000ae0 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff faef 	bl	8000ae0 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1e9      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d1f1      	bne.n	80014fe <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x302>
 8001524:	e0c6      	b.n	80016b4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	231f      	movs	r3, #31
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	; 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	2b20      	cmp	r3, #32
 8001538:	d11e      	bne.n	8001578 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x322>
 8001544:	e0b6      	b.n	80016b4 <HAL_RCC_OscConfig+0x490>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d000      	beq.n	8001550 <HAL_RCC_OscConfig+0x32c>
 800154e:	e0b1      	b.n	80016b4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e1c7      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
 8001554:	40021000 	.word	0x40021000
 8001558:	fffeffff 	.word	0xfffeffff
 800155c:	fffbffff 	.word	0xfffbffff
 8001560:	ffff80ff 	.word	0xffff80ff
 8001564:	ffffc7ff 	.word	0xffffc7ff
 8001568:	00f42400 	.word	0x00f42400
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004
 8001574:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001578:	4bb8      	ldr	r3, [pc, #736]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800157a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x364>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x366>
 8001588:	2300      	movs	r3, #0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d011      	beq.n	80015b2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4bb3      	ldr	r3, [pc, #716]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001592:	4bb2      	ldr	r3, [pc, #712]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	430a      	orrs	r2, r1
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c
 800159c:	4baf      	ldr	r3, [pc, #700]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800159e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	055b      	lsls	r3, r3, #21
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015aa:	231f      	movs	r3, #31
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b2:	4bab      	ldr	r3, [pc, #684]	; (8001860 <HAL_RCC_OscConfig+0x63c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015be:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <HAL_RCC_OscConfig+0x63c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4ba7      	ldr	r3, [pc, #668]	; (8001860 <HAL_RCC_OscConfig+0x63c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fa88 	bl	8000ae0 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fa83 	bl	8000ae0 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e17d      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <HAL_RCC_OscConfig+0x63c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x3e6>
 80015fc:	4b97      	ldr	r3, [pc, #604]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001600:	4b96      	ldr	r3, [pc, #600]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x420>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x408>
 8001612:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	65da      	str	r2, [r3, #92]	; 0x5c
 800161e:	4b8f      	ldr	r3, [pc, #572]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x420>
 800162c:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800162e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001630:	4b8a      	ldr	r3, [pc, #552]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	65da      	str	r2, [r3, #92]	; 0x5c
 8001638:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800163a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800163c:	4b87      	ldr	r3, [pc, #540]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800163e:	2104      	movs	r1, #4
 8001640:	438a      	bics	r2, r1
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d014      	beq.n	8001676 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fa48 	bl	8000ae0 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001654:	e009      	b.n	800166a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fa43 	bl	8000ae0 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4a80      	ldr	r2, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x640>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e13c      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x432>
 8001674:	e013      	b.n	800169e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fa33 	bl	8000ae0 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fa2e 	bl	8000ae0 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a76      	ldr	r2, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x640>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e127      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800169e:	231f      	movs	r3, #31
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b6c      	ldr	r3, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80016aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80016ae:	496e      	ldr	r1, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x644>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2220      	movs	r2, #32
 80016ba:	4013      	ands	r3, r2
 80016bc:	d039      	beq.n	8001732 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01b      	beq.n	80016fe <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	03c9      	lsls	r1, r1, #15
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa04 	bl	8000ae0 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016de:	f7ff f9ff 	bl	8000ae0 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0f9      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016f0:	4b5a      	ldr	r3, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x4ba>
 80016fc:	e019      	b.n	8001732 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001704:	4959      	ldr	r1, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x648>)
 8001706:	400a      	ands	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff f9e9 	bl	8000ae0 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001714:	f7ff f9e4 	bl	8000ae0 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0de      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001726:	4b4d      	ldr	r3, [pc, #308]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d100      	bne.n	800173c <HAL_RCC_OscConfig+0x518>
 800173a:	e0d2      	b.n	80018e2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2238      	movs	r2, #56	; 0x38
 8001742:	4013      	ands	r3, r2
 8001744:	2b10      	cmp	r3, #16
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x526>
 8001748:	e081      	b.n	800184e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d156      	bne.n	8001800 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001758:	4945      	ldr	r1, [pc, #276]	; (8001870 <HAL_RCC_OscConfig+0x64c>)
 800175a:	400a      	ands	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff f9bf 	bl	8000ae0 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f9ba 	bl	8000ae0 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b4      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	049b      	lsls	r3, r3, #18
 8001782:	4013      	ands	r3, r2
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <HAL_RCC_OscConfig+0x650>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	431a      	orrs	r2, r3
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0449      	lsls	r1, r1, #17
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	0549      	lsls	r1, r1, #21
 80017d2:	430a      	orrs	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff f983 	bl	8000ae0 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f97e 	bl	8000ae0 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e078      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x638>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x5bc>
 80017fe:	e070      	b.n	80018e2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001806:	491a      	ldr	r1, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x64c>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001812:	2103      	movs	r1, #3
 8001814:	438a      	bics	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_RCC_OscConfig+0x638>)
 800181e:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_OscConfig+0x654>)
 8001820:	400a      	ands	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f95c 	bl	8000ae0 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff f957 	bl	8000ae0 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e051      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x638>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	049b      	lsls	r3, r3, #18
 8001848:	4013      	ands	r3, r2
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
 800184c:	e049      	b.n	80018e2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d112      	bne.n	800187c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e044      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	40007000 	.word	0x40007000
 8001864:	00001388 	.word	0x00001388
 8001868:	efffffff 	.word	0xefffffff
 800186c:	ffbfffff 	.word	0xffbfffff
 8001870:	feffffff 	.word	0xfeffffff
 8001874:	11c1808c 	.word	0x11c1808c
 8001878:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x6c8>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2203      	movs	r2, #3
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	429a      	cmp	r2, r3
 800188e:	d126      	bne.n	80018de <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2270      	movs	r2, #112	; 0x70
 8001894:	401a      	ands	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11f      	bne.n	80018de <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	23fe      	movs	r3, #254	; 0xfe
 80018a2:	01db      	lsls	r3, r3, #7
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d116      	bne.n	80018de <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	23f8      	movs	r3, #248	; 0xf8
 80018b4:	039b      	lsls	r3, r3, #14
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d10e      	bne.n	80018de <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	23e0      	movs	r3, #224	; 0xe0
 80018c4:	051b      	lsls	r3, r3, #20
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	0f5b      	lsrs	r3, r3, #29
 80018d4:	075a      	lsls	r2, r3, #29
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b008      	add	sp, #32
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0e9      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b76      	ldr	r3, [pc, #472]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2207      	movs	r2, #7
 800190a:	4013      	ands	r3, r2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d91e      	bls.n	8001950 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2207      	movs	r2, #7
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001924:	f7ff f8dc 	bl	8000ae0 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800192c:	e009      	b.n	8001942 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192e:	f7ff f8d7 	bl	8000ae0 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	4a6a      	ldr	r2, [pc, #424]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0ca      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2207      	movs	r2, #7
 8001948:	4013      	ands	r3, r2
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d015      	beq.n	8001986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2204      	movs	r2, #4
 8001960:	4013      	ands	r3, r2
 8001962:	d006      	beq.n	8001972 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001964:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800196a:	21e0      	movs	r1, #224	; 0xe0
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4a5d      	ldr	r2, [pc, #372]	; (8001aec <HAL_RCC_ClockConfig+0x1fc>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2201      	movs	r2, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d057      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	4013      	ands	r3, r2
 80019a2:	d12b      	bne.n	80019fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e097      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	049b      	lsls	r3, r3, #18
 80019b8:	4013      	ands	r3, r2
 80019ba:	d11f      	bne.n	80019fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e08b      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	d113      	bne.n	80019fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e07f      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d106      	bne.n	80019ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e074      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e06d      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019fc:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2207      	movs	r2, #7
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a10:	f7ff f866 	bl	8000ae0 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7ff f861 	bl	8000ae0 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	; 0x38
 8001a34:	401a      	ands	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1ec      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2207      	movs	r2, #7
 8001a46:	4013      	ands	r3, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d21e      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2207      	movs	r2, #7
 8001a54:	4393      	bics	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a60:	f7ff f83e 	bl	8000ae0 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a68:	e009      	b.n	8001a7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7ff f839 	bl	8000ae0 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e02c      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2207      	movs	r2, #7
 8001a84:	4013      	ands	r3, r2
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2204      	movs	r2, #4
 8001a92:	4013      	ands	r3, r2
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_RCC_ClockConfig+0x200>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aaa:	f000 f829 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001aae:	0001      	movs	r1, r0
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	401a      	ands	r2, r3
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_RCC_ClockConfig+0x204>)
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	58d3      	ldr	r3, [r2, r3]
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x208>)
 8001aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_ClockConfig+0x20c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe ffa9 	bl	8000a28 <HAL_InitTick>
 8001ad6:	0003      	movs	r3, r0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	00001388 	.word	0x00001388
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffff0ff 	.word	0xfffff0ff
 8001af0:	ffff8fff 	.word	0xffff8fff
 8001af4:	080046e8 	.word	0x080046e8
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2238      	movs	r2, #56	; 0x38
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d10f      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0adb      	lsrs	r3, r3, #11
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	4835      	ldr	r0, [pc, #212]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b26:	f7fe faed 	bl	8000104 <__udivsi3>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e05d      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2238      	movs	r2, #56	; 0x38
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e054      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d138      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2203      	movs	r2, #3
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	2207      	movs	r2, #7
 8001b60:	4013      	ands	r3, r2
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	4824      	ldr	r0, [pc, #144]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b70:	f7fe fac8 	bl	8000104 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	227f      	movs	r2, #127	; 0x7f
 8001b80:	4013      	ands	r3, r2
 8001b82:	434b      	muls	r3, r1
 8001b84:	617b      	str	r3, [r7, #20]
        break;
 8001b86:	e00d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b8c:	f7fe faba 	bl	8000104 <__udivsi3>
 8001b90:	0003      	movs	r3, r0
 8001b92:	0019      	movs	r1, r3
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	227f      	movs	r2, #127	; 0x7f
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	434b      	muls	r3, r1
 8001ba0:	617b      	str	r3, [r7, #20]
        break;
 8001ba2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0f5b      	lsrs	r3, r3, #29
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	3301      	adds	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f7fe faa5 	bl	8000104 <__udivsi3>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2238      	movs	r2, #56	; 0x38
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d103      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2238      	movs	r2, #56	; 0x38
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b18      	cmp	r3, #24
 8001bde:	d103      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001be0:	23fa      	movs	r3, #250	; 0xfa
 8001be2:	01db      	lsls	r3, r3, #7
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	e001      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bec:	693b      	ldr	r3, [r7, #16]
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c1c:	f7ff fff2 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c20:	0004      	movs	r4, r0
 8001c22:	f7ff faf3 	bl	800120c <LL_RCC_GetAPB1Prescaler>
 8001c26:	0003      	movs	r3, r0
 8001c28:	0b1a      	lsrs	r2, r3, #12
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	58d3      	ldr	r3, [r2, r3]
 8001c30:	221f      	movs	r2, #31
 8001c32:	4013      	ands	r3, r2
 8001c34:	40dc      	lsrs	r4, r3
 8001c36:	0023      	movs	r3, r4
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	08004728 	.word	0x08004728

08001c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c4c:	2313      	movs	r3, #19
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c54:	2312      	movs	r3, #18
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c68:	e0ad      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2011      	movs	r0, #17
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	055b      	lsls	r3, r3, #21
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d110      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0549      	lsls	r1, r1, #21
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	055b      	lsls	r3, r3, #21
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0049      	lsls	r1, r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cae:	f7fe ff17 	bl	8000ae0 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7fe ff12 	bl	8000ae0 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d904      	bls.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001cc6:	2313      	movs	r3, #19
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2203      	movs	r2, #3
 8001ccc:	701a      	strb	r2, [r3, #0]
        break;
 8001cce:	e005      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0ed      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cdc:	2313      	movs	r3, #19
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d15e      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cea:	23c0      	movs	r3, #192	; 0xc0
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d019      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d014      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0249      	lsls	r1, r1, #9
 8001d16:	430a      	orrs	r2, r1
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d20:	491e      	ldr	r1, [pc, #120]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d016      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fed4 	bl	8000ae0 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3c:	e00c      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fecf 	bl	8000ae0 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d904      	bls.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d4e:	2313      	movs	r3, #19
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2203      	movs	r2, #3
 8001d54:	701a      	strb	r2, [r3, #0]
            break;
 8001d56:	e004      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0ed      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d62:	2313      	movs	r3, #19
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d80:	e016      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d82:	2312      	movs	r3, #18
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	2213      	movs	r2, #19
 8001d88:	18ba      	adds	r2, r7, r2
 8001d8a:	7812      	ldrb	r2, [r2, #0]
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	fffffcff 	.word	0xfffffcff
 8001d9c:	fffeffff 	.word	0xfffeffff
 8001da0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001da4:	2312      	movs	r3, #18
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2213      	movs	r2, #19
 8001daa:	18ba      	adds	r2, r7, r2
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001db0:	2311      	movs	r3, #17
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4bb6      	ldr	r3, [pc, #728]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dbe:	4bb5      	ldr	r3, [pc, #724]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc0:	49b5      	ldr	r1, [pc, #724]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dd0:	4bb0      	ldr	r3, [pc, #704]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4bad      	ldr	r3, [pc, #692]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dee:	4ba9      	ldr	r3, [pc, #676]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	220c      	movs	r2, #12
 8001df4:	4393      	bics	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4ba5      	ldr	r3, [pc, #660]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e0c:	4ba1      	ldr	r3, [pc, #644]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	2230      	movs	r2, #48	; 0x30
 8001e12:	4393      	bics	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2210      	movs	r2, #16
 8001e26:	4013      	ands	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e2a:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	4b96      	ldr	r3, [pc, #600]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e4a:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	4a94      	ldr	r2, [pc, #592]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e6a:	4b8a      	ldr	r3, [pc, #552]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4a8d      	ldr	r2, [pc, #564]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e78:	4b86      	ldr	r3, [pc, #536]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	4a86      	ldr	r2, [pc, #536]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	4b7e      	ldr	r3, [pc, #504]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	4a7f      	ldr	r2, [pc, #508]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	4b77      	ldr	r3, [pc, #476]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	4a79      	ldr	r2, [pc, #484]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ee6:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	0899      	lsrs	r1, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	05db      	lsls	r3, r3, #23
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	039b      	lsls	r3, r3, #14
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	03db      	lsls	r3, r3, #15
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f5e:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0449      	lsls	r1, r1, #17
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	03db      	lsls	r3, r3, #15
 8001f74:	4013      	ands	r3, r2
 8001f76:	d016      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	045b      	lsls	r3, r3, #17
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0449      	lsls	r1, r1, #17
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d014      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fb2:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0249      	lsls	r1, r1, #9
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d014      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	220c      	movs	r2, #12
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b04      	cmp	r3, #4
 8002002:	d106      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0249      	lsls	r1, r1, #9
 800200e:	430a      	orrs	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	045b      	lsls	r3, r3, #17
 800201a:	4013      	ands	r3, r2
 800201c:	d016      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202e:	430a      	orrs	r2, r1
 8002030:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0449      	lsls	r1, r1, #17
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	049b      	lsls	r3, r3, #18
 8002054:	4013      	ands	r3, r2
 8002056:	d016      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002068:	430a      	orrs	r2, r1
 800206a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0449      	lsls	r1, r1, #17
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002086:	2312      	movs	r3, #18
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	efffffff 	.word	0xefffffff
 800209c:	fffff3ff 	.word	0xfffff3ff
 80020a0:	fffffcff 	.word	0xfffffcff
 80020a4:	fff3ffff 	.word	0xfff3ffff
 80020a8:	ffcfffff 	.word	0xffcfffff
 80020ac:	ffffcfff 	.word	0xffffcfff
 80020b0:	ffff3fff 	.word	0xffff3fff
 80020b4:	ffbfffff 	.word	0xffbfffff
 80020b8:	feffffff 	.word	0xfeffffff

080020bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e046      	b.n	800215c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2284      	movs	r2, #132	; 0x84
 80020d2:	589b      	ldr	r3, [r3, r2]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe fbc4 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2284      	movs	r2, #132	; 0x84
 80020ec:	2124      	movs	r1, #36	; 0x24
 80020ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fc92 	bl	8002a2c <UART_SetConfig>
 8002108:	0003      	movs	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e024      	b.n	800215c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f001 f805 	bl	800312c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	490d      	ldr	r1, [pc, #52]	; (8002164 <HAL_UART_Init+0xa8>)
 800212e:	400a      	ands	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	212a      	movs	r1, #42	; 0x2a
 800213e:	438a      	bics	r2, r1
 8002140:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f001 f89d 	bl	8003294 <UART_CheckIdleState>
 800215a:	0003      	movs	r3, r0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}
 8002164:	ffffb7ff 	.word	0xffffb7ff

08002168 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2284      	movs	r2, #132	; 0x84
 800217a:	589b      	ldr	r3, [r3, r2]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d000      	beq.n	8002182 <HAL_UART_Transmit_IT+0x1a>
 8002180:	e0a0      	b.n	80022c4 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_UART_Transmit_IT+0x28>
 8002188:	1dbb      	adds	r3, r7, #6
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e098      	b.n	80022c6 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	015b      	lsls	r3, r3, #5
 800219c:	429a      	cmp	r2, r3
 800219e:	d109      	bne.n	80021b4 <HAL_UART_Transmit_IT+0x4c>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d001      	beq.n	80021b4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e088      	b.n	80022c6 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Transmit_IT+0x5a>
 80021be:	2302      	movs	r3, #2
 80021c0:	e081      	b.n	80022c6 <HAL_UART_Transmit_IT+0x15e>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1dba      	adds	r2, r7, #6
 80021d4:	2154      	movs	r1, #84	; 0x54
 80021d6:	8812      	ldrh	r2, [r2, #0]
 80021d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1dba      	adds	r2, r7, #6
 80021de:	2156      	movs	r1, #86	; 0x56
 80021e0:	8812      	ldrh	r2, [r2, #0]
 80021e2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	228c      	movs	r2, #140	; 0x8c
 80021ee:	2100      	movs	r1, #0
 80021f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2284      	movs	r2, #132	; 0x84
 80021f6:	2121      	movs	r1, #33	; 0x21
 80021f8:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	059b      	lsls	r3, r3, #22
 8002202:	429a      	cmp	r2, r3
 8002204:	d12e      	bne.n	8002264 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	429a      	cmp	r2, r3
 8002210:	d107      	bne.n	8002222 <HAL_UART_Transmit_IT+0xba>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_UART_Transmit_IT+0x168>)
 800221e:	675a      	str	r2, [r3, #116]	; 0x74
 8002220:	e002      	b.n	8002228 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_UART_Transmit_IT+0x16c>)
 8002226:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	2100      	movs	r1, #0
 800222e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002230:	f3ef 8310 	mrs	r3, PRIMASK
 8002234:	61fb      	str	r3, [r7, #28]
  return(result);
 8002236:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
 800223a:	2301      	movs	r3, #1
 800223c:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f383 8810 	msr	PRIMASK, r3
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	0409      	lsls	r1, r1, #16
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	e02d      	b.n	80022c0 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	015b      	lsls	r3, r3, #5
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_UART_Transmit_IT+0x118>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_UART_Transmit_IT+0x170>)
 800227c:	675a      	str	r2, [r3, #116]	; 0x74
 800227e:	e002      	b.n	8002286 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_UART_Transmit_IT+0x174>)
 8002284:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228e:	f3ef 8310 	mrs	r3, PRIMASK
 8002292:	613b      	str	r3, [r7, #16]
  return(result);
 8002294:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f383 8810 	msr	PRIMASK, r3
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f383 8810 	msr	PRIMASK, r3
}
 80022be:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b00c      	add	sp, #48	; 0x30
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	08003a29 	.word	0x08003a29
 80022d4:	0800393d 	.word	0x0800393d
 80022d8:	0800387f 	.word	0x0800387f
 80022dc:	080037cb 	.word	0x080037cb

080022e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	1dbb      	adds	r3, r7, #6
 80022ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2288      	movs	r2, #136	; 0x88
 80022f2:	589b      	ldr	r3, [r3, r2]
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d15a      	bne.n	80023ae <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_UART_Receive_IT+0x26>
 80022fe:	1dbb      	adds	r3, r7, #6
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e052      	b.n	80023b0 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	015b      	lsls	r3, r3, #5
 8002312:	429a      	cmp	r2, r3
 8002314:	d109      	bne.n	800232a <HAL_UART_Receive_IT+0x4a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d001      	beq.n	800232a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e042      	b.n	80023b0 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	5c9b      	ldrb	r3, [r3, r2]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_UART_Receive_IT+0x58>
 8002334:	2302      	movs	r3, #2
 8002336:	e03b      	b.n	80023b0 <HAL_UART_Receive_IT+0xd0>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	2101      	movs	r1, #1
 800233e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_UART_Receive_IT+0xd8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d025      	beq.n	800239c <HAL_UART_Receive_IT+0xbc>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_UART_Receive_IT+0xdc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d020      	beq.n	800239c <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	4013      	ands	r3, r2
 8002366:	d019      	beq.n	800239c <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002368:	f3ef 8310 	mrs	r3, PRIMASK
 800236c:	613b      	str	r3, [r7, #16]
  return(result);
 800236e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2301      	movs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	04c9      	lsls	r1, r1, #19
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f383 8810 	msr	PRIMASK, r3
}
 800239a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800239c:	1dbb      	adds	r3, r7, #6
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 f887 	bl	80034b8 <UART_Start_Receive_IT>
 80023aa:	0003      	movs	r3, r0
 80023ac:	e000      	b.n	80023b0 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b008      	add	sp, #32
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40008000 	.word	0x40008000
 80023bc:	40008400 	.word	0x40008400

080023c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b0aa      	sub	sp, #168	; 0xa8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	22a4      	movs	r2, #164	; 0xa4
 80023d0:	18b9      	adds	r1, r7, r2
 80023d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	20a0      	movs	r0, #160	; 0xa0
 80023dc:	1839      	adds	r1, r7, r0
 80023de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	249c      	movs	r4, #156	; 0x9c
 80023e8:	1939      	adds	r1, r7, r4
 80023ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023ec:	0011      	movs	r1, r2
 80023ee:	18bb      	adds	r3, r7, r2
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4aa0      	ldr	r2, [pc, #640]	; (8002674 <HAL_UART_IRQHandler+0x2b4>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	2298      	movs	r2, #152	; 0x98
 80023f8:	18bd      	adds	r5, r7, r2
 80023fa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80023fc:	18bb      	adds	r3, r7, r2
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11a      	bne.n	800243a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002404:	187b      	adds	r3, r7, r1
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2220      	movs	r2, #32
 800240a:	4013      	ands	r3, r2
 800240c:	d015      	beq.n	800243a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800240e:	183b      	adds	r3, r7, r0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2220      	movs	r2, #32
 8002414:	4013      	ands	r3, r2
 8002416:	d105      	bne.n	8002424 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002418:	193b      	adds	r3, r7, r4
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4013      	ands	r3, r2
 8002422:	d00a      	beq.n	800243a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_UART_IRQHandler+0x6e>
 800242c:	e2cf      	b.n	80029ce <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	0010      	movs	r0, r2
 8002436:	4798      	blx	r3
      }
      return;
 8002438:	e2c9      	b.n	80029ce <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800243a:	2398      	movs	r3, #152	; 0x98
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d100      	bne.n	8002446 <HAL_UART_IRQHandler+0x86>
 8002444:	e11e      	b.n	8002684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002446:	239c      	movs	r3, #156	; 0x9c
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a8a      	ldr	r2, [pc, #552]	; (8002678 <HAL_UART_IRQHandler+0x2b8>)
 800244e:	4013      	ands	r3, r2
 8002450:	d106      	bne.n	8002460 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a88      	ldr	r2, [pc, #544]	; (800267c <HAL_UART_IRQHandler+0x2bc>)
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_UART_IRQHandler+0xa0>
 800245e:	e111      	b.n	8002684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002460:	23a4      	movs	r3, #164	; 0xa4
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d012      	beq.n	8002492 <HAL_UART_IRQHandler+0xd2>
 800246c:	23a0      	movs	r3, #160	; 0xa0
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d00b      	beq.n	8002492 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	228c      	movs	r2, #140	; 0x8c
 8002486:	589b      	ldr	r3, [r3, r2]
 8002488:	2201      	movs	r2, #1
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	218c      	movs	r1, #140	; 0x8c
 8002490:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002492:	23a4      	movs	r3, #164	; 0xa4
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d011      	beq.n	80024c2 <HAL_UART_IRQHandler+0x102>
 800249e:	239c      	movs	r3, #156	; 0x9c
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2202      	movs	r2, #2
 80024b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	228c      	movs	r2, #140	; 0x8c
 80024b6:	589b      	ldr	r3, [r3, r2]
 80024b8:	2204      	movs	r2, #4
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	218c      	movs	r1, #140	; 0x8c
 80024c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024c2:	23a4      	movs	r3, #164	; 0xa4
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d011      	beq.n	80024f2 <HAL_UART_IRQHandler+0x132>
 80024ce:	239c      	movs	r3, #156	; 0x9c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	228c      	movs	r2, #140	; 0x8c
 80024e6:	589b      	ldr	r3, [r3, r2]
 80024e8:	2202      	movs	r2, #2
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	218c      	movs	r1, #140	; 0x8c
 80024f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024f2:	23a4      	movs	r3, #164	; 0xa4
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2208      	movs	r2, #8
 80024fa:	4013      	ands	r3, r2
 80024fc:	d017      	beq.n	800252e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2220      	movs	r2, #32
 8002506:	4013      	ands	r3, r2
 8002508:	d105      	bne.n	8002516 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800250a:	239c      	movs	r3, #156	; 0x9c
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a59      	ldr	r2, [pc, #356]	; (8002678 <HAL_UART_IRQHandler+0x2b8>)
 8002512:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2208      	movs	r2, #8
 800251c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	228c      	movs	r2, #140	; 0x8c
 8002522:	589b      	ldr	r3, [r3, r2]
 8002524:	2208      	movs	r2, #8
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	218c      	movs	r1, #140	; 0x8c
 800252c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800252e:	23a4      	movs	r3, #164	; 0xa4
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_UART_IRQHandler+0x1a4>
 800253c:	23a0      	movs	r3, #160	; 0xa0
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	04db      	lsls	r3, r3, #19
 8002546:	4013      	ands	r3, r2
 8002548:	d00c      	beq.n	8002564 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	228c      	movs	r2, #140	; 0x8c
 8002558:	589b      	ldr	r3, [r3, r2]
 800255a:	2220      	movs	r2, #32
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	218c      	movs	r1, #140	; 0x8c
 8002562:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	228c      	movs	r2, #140	; 0x8c
 8002568:	589b      	ldr	r3, [r3, r2]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_UART_IRQHandler+0x1b0>
 800256e:	e230      	b.n	80029d2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002570:	23a4      	movs	r3, #164	; 0xa4
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	d015      	beq.n	80025a8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800257c:	23a0      	movs	r3, #160	; 0xa0
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d106      	bne.n	8002596 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002588:	239c      	movs	r3, #156	; 0x9c
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	055b      	lsls	r3, r3, #21
 8002592:	4013      	ands	r3, r2
 8002594:	d008      	beq.n	80025a8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	0010      	movs	r0, r2
 80025a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	228c      	movs	r2, #140	; 0x8c
 80025ac:	589b      	ldr	r3, [r3, r2]
 80025ae:	2194      	movs	r1, #148	; 0x94
 80025b0:	187a      	adds	r2, r7, r1
 80025b2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	4013      	ands	r3, r2
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d004      	beq.n	80025cc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2228      	movs	r2, #40	; 0x28
 80025c8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025ca:	d047      	beq.n	800265c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f001 f87e 	bl	80036d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	4013      	ands	r3, r2
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d137      	bne.n	8002652 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8310 	mrs	r3, PRIMASK
 80025e6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ea:	2090      	movs	r0, #144	; 0x90
 80025ec:	183a      	adds	r2, r7, r0
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	2301      	movs	r3, #1
 80025f2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	438a      	bics	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	183b      	adds	r3, r7, r0
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002614:	f383 8810 	msr	PRIMASK, r3
}
 8002618:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_UART_IRQHandler+0x2c0>)
 8002628:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262e:	0018      	movs	r0, r3
 8002630:	f7fe fbd8 	bl	8000de4 <HAL_DMA_Abort_IT>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d01a      	beq.n	800266e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002642:	0018      	movs	r0, r3
 8002644:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002646:	e012      	b.n	800266e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f9da 	bl	8002a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00d      	b.n	800266e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f9d5 	bl	8002a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265a:	e008      	b.n	800266e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f9d0 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	228c      	movs	r2, #140	; 0x8c
 8002668:	2100      	movs	r1, #0
 800266a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800266c:	e1b1      	b.n	80029d2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266e:	46c0      	nop			; (mov r8, r8)
    return;
 8002670:	e1af      	b.n	80029d2 <HAL_UART_IRQHandler+0x612>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	0000080f 	.word	0x0000080f
 8002678:	10000001 	.word	0x10000001
 800267c:	04000120 	.word	0x04000120
 8002680:	0800379d 	.word	0x0800379d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d000      	beq.n	800268e <HAL_UART_IRQHandler+0x2ce>
 800268c:	e135      	b.n	80028fa <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800268e:	23a4      	movs	r3, #164	; 0xa4
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2210      	movs	r2, #16
 8002696:	4013      	ands	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_UART_IRQHandler+0x2dc>
 800269a:	e12e      	b.n	80028fa <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800269c:	23a0      	movs	r3, #160	; 0xa0
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2210      	movs	r2, #16
 80026a4:	4013      	ands	r3, r2
 80026a6:	d100      	bne.n	80026aa <HAL_UART_IRQHandler+0x2ea>
 80026a8:	e127      	b.n	80028fa <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2210      	movs	r2, #16
 80026b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d000      	beq.n	80026c2 <HAL_UART_IRQHandler+0x302>
 80026c0:	e09e      	b.n	8002800 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	217e      	movs	r1, #126	; 0x7e
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d100      	bne.n	80026da <HAL_UART_IRQHandler+0x31a>
 80026d8:	e17d      	b.n	80029d6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	225c      	movs	r2, #92	; 0x5c
 80026de:	5a9b      	ldrh	r3, [r3, r2]
 80026e0:	187a      	adds	r2, r7, r1
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d300      	bcc.n	80026ea <HAL_UART_IRQHandler+0x32a>
 80026e8:	e175      	b.n	80029d6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	187a      	adds	r2, r7, r1
 80026ee:	215e      	movs	r1, #94	; 0x5e
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2220      	movs	r2, #32
 80026fe:	4013      	ands	r3, r2
 8002700:	d16f      	bne.n	80027e2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002702:	f3ef 8310 	mrs	r3, PRIMASK
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800270a:	67bb      	str	r3, [r7, #120]	; 0x78
 800270c:	2301      	movs	r3, #1
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	49b1      	ldr	r1, [pc, #708]	; (80029e8 <HAL_UART_IRQHandler+0x628>)
 8002724:	400a      	ands	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002734:	f3ef 8310 	mrs	r3, PRIMASK
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800273a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
 800273e:	2301      	movs	r3, #1
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002744:	f383 8810 	msr	PRIMASK, r3
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	438a      	bics	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002760:	f383 8810 	msr	PRIMASK, r3
}
 8002764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002766:	f3ef 8310 	mrs	r3, PRIMASK
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800276c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276e:	673b      	str	r3, [r7, #112]	; 0x70
 8002770:	2301      	movs	r3, #1
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002776:	f383 8810 	msr	PRIMASK, r3
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2140      	movs	r1, #64	; 0x40
 8002788:	438a      	bics	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2288      	movs	r2, #136	; 0x88
 800279c:	2120      	movs	r1, #32
 800279e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a6:	f3ef 8310 	mrs	r3, PRIMASK
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b0:	2301      	movs	r3, #1
 80027b2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2110      	movs	r1, #16
 80027c8:	438a      	bics	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027dc:	0018      	movs	r0, r3
 80027de:	f7fe faa1 	bl	8000d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	225c      	movs	r2, #92	; 0x5c
 80027e6:	5a9a      	ldrh	r2, [r3, r2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	215e      	movs	r1, #94	; 0x5e
 80027ec:	5a5b      	ldrh	r3, [r3, r1]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f90b 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027fe:	e0ea      	b.n	80029d6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	225c      	movs	r2, #92	; 0x5c
 8002804:	5a99      	ldrh	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	225e      	movs	r2, #94	; 0x5e
 800280a:	5a9b      	ldrh	r3, [r3, r2]
 800280c:	b29a      	uxth	r2, r3
 800280e:	208e      	movs	r0, #142	; 0x8e
 8002810:	183b      	adds	r3, r7, r0
 8002812:	1a8a      	subs	r2, r1, r2
 8002814:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	225e      	movs	r2, #94	; 0x5e
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d100      	bne.n	8002824 <HAL_UART_IRQHandler+0x464>
 8002822:	e0da      	b.n	80029da <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002824:	183b      	adds	r3, r7, r0
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <HAL_UART_IRQHandler+0x46e>
 800282c:	e0d5      	b.n	80029da <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	60fb      	str	r3, [r7, #12]
  return(result);
 8002834:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002836:	2488      	movs	r4, #136	; 0x88
 8002838:	193a      	adds	r2, r7, r4
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4966      	ldr	r1, [pc, #408]	; (80029ec <HAL_UART_IRQHandler+0x62c>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	193b      	adds	r3, r7, r4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002866:	f3ef 8310 	mrs	r3, PRIMASK
 800286a:	61bb      	str	r3, [r7, #24]
  return(result);
 800286c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800286e:	2484      	movs	r4, #132	; 0x84
 8002870:	193a      	adds	r2, r7, r4
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4959      	ldr	r1, [pc, #356]	; (80029f0 <HAL_UART_IRQHandler+0x630>)
 800288c:	400a      	ands	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	193b      	adds	r3, r7, r4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f383 8810 	msr	PRIMASK, r3
}
 800289c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2288      	movs	r2, #136	; 0x88
 80028a2:	2120      	movs	r1, #32
 80028a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8310 	mrs	r3, PRIMASK
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	193a      	adds	r2, r7, r4
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	f383 8810 	msr	PRIMASK, r3
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2110      	movs	r1, #16
 80028d8:	438a      	bics	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 f88e 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028f8:	e06f      	b.n	80029da <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028fa:	23a4      	movs	r3, #164	; 0xa4
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	035b      	lsls	r3, r3, #13
 8002904:	4013      	ands	r3, r2
 8002906:	d010      	beq.n	800292a <HAL_UART_IRQHandler+0x56a>
 8002908:	239c      	movs	r3, #156	; 0x9c
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	03db      	lsls	r3, r3, #15
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0352      	lsls	r2, r2, #13
 800291e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fd76 	bl	8004414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002928:	e05a      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800292a:	23a4      	movs	r3, #164	; 0xa4
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	4013      	ands	r3, r2
 8002934:	d016      	beq.n	8002964 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002936:	23a0      	movs	r3, #160	; 0xa0
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	4013      	ands	r3, r2
 8002940:	d106      	bne.n	8002950 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002942:	239c      	movs	r3, #156	; 0x9c
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	4013      	ands	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	2b00      	cmp	r3, #0
 8002956:	d042      	beq.n	80029de <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	0010      	movs	r0, r2
 8002960:	4798      	blx	r3
    }
    return;
 8002962:	e03c      	b.n	80029de <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002964:	23a4      	movs	r3, #164	; 0xa4
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	4013      	ands	r3, r2
 800296e:	d00a      	beq.n	8002986 <HAL_UART_IRQHandler+0x5c6>
 8002970:	23a0      	movs	r3, #160	; 0xa0
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	4013      	ands	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0018      	movs	r0, r3
 8002980:	f001 f8cc 	bl	8003b1c <UART_EndTransmit_IT>
    return;
 8002984:	e02c      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002986:	23a4      	movs	r3, #164	; 0xa4
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	4013      	ands	r3, r2
 8002992:	d00b      	beq.n	80029ac <HAL_UART_IRQHandler+0x5ec>
 8002994:	23a0      	movs	r3, #160	; 0xa0
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	4013      	ands	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f001 fd45 	bl	8004434 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029aa:	e019      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029ac:	23a4      	movs	r3, #164	; 0xa4
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	045b      	lsls	r3, r3, #17
 80029b6:	4013      	ands	r3, r2
 80029b8:	d012      	beq.n	80029e0 <HAL_UART_IRQHandler+0x620>
 80029ba:	23a0      	movs	r3, #160	; 0xa0
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da0d      	bge.n	80029e0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f001 fd2c 	bl	8004424 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029cc:	e008      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
      return;
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	e006      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
    return;
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	e004      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
      return;
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	e002      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
      return;
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	e000      	b.n	80029e0 <HAL_UART_IRQHandler+0x620>
    return;
 80029de:	46c0      	nop			; (mov r8, r8)
  }
}
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b02a      	add	sp, #168	; 0xa8
 80029e4:	bdb0      	pop	{r4, r5, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	fffffeff 	.word	0xfffffeff
 80029ec:	fffffedf 	.word	0xfffffedf
 80029f0:	effffffe 	.word	0xeffffffe

080029f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	1cbb      	adds	r3, r7, #2
 8002a20:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b090      	sub	sp, #64	; 0x40
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a34:	231a      	movs	r3, #26
 8002a36:	2220      	movs	r2, #32
 8002a38:	4694      	mov	ip, r2
 8002a3a:	44bc      	add	ip, r7
 8002a3c:	4463      	add	r3, ip
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4ac1      	ldr	r2, [pc, #772]	; (8002d68 <UART_SetConfig+0x33c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4abd      	ldr	r2, [pc, #756]	; (8002d6c <UART_SetConfig+0x340>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	68d9      	ldr	r1, [r3, #12]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	0003      	movs	r3, r0
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4ab6      	ldr	r2, [pc, #728]	; (8002d70 <UART_SetConfig+0x344>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <UART_SetConfig+0x82>
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4ab5      	ldr	r2, [pc, #724]	; (8002d74 <UART_SetConfig+0x348>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4ab0      	ldr	r2, [pc, #704]	; (8002d78 <UART_SetConfig+0x34c>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	220f      	movs	r2, #15
 8002acc:	4393      	bics	r3, r2
 8002ace:	0018      	movs	r0, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	0003      	movs	r3, r0
 8002ada:	430b      	orrs	r3, r1
 8002adc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4aa6      	ldr	r2, [pc, #664]	; (8002d7c <UART_SetConfig+0x350>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d136      	bne.n	8002b56 <UART_SetConfig+0x12a>
 8002ae8:	4ba5      	ldr	r3, [pc, #660]	; (8002d80 <UART_SetConfig+0x354>)
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	2203      	movs	r2, #3
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d020      	beq.n	8002b36 <UART_SetConfig+0x10a>
 8002af4:	d827      	bhi.n	8002b46 <UART_SetConfig+0x11a>
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d00d      	beq.n	8002b16 <UART_SetConfig+0xea>
 8002afa:	d824      	bhi.n	8002b46 <UART_SetConfig+0x11a>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <UART_SetConfig+0xda>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d010      	beq.n	8002b26 <UART_SetConfig+0xfa>
 8002b04:	e01f      	b.n	8002b46 <UART_SetConfig+0x11a>
 8002b06:	231b      	movs	r3, #27
 8002b08:	2220      	movs	r2, #32
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e16f      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2220      	movs	r2, #32
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	44bc      	add	ip, r7
 8002b1e:	4463      	add	r3, ip
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e167      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2220      	movs	r2, #32
 8002b2a:	4694      	mov	ip, r2
 8002b2c:	44bc      	add	ip, r7
 8002b2e:	4463      	add	r3, ip
 8002b30:	2204      	movs	r2, #4
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e15f      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b36:	231b      	movs	r3, #27
 8002b38:	2220      	movs	r2, #32
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	44bc      	add	ip, r7
 8002b3e:	4463      	add	r3, ip
 8002b40:	2208      	movs	r2, #8
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e157      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b46:	231b      	movs	r3, #27
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	44bc      	add	ip, r7
 8002b4e:	4463      	add	r3, ip
 8002b50:	2210      	movs	r2, #16
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e14f      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <UART_SetConfig+0x358>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d136      	bne.n	8002bce <UART_SetConfig+0x1a2>
 8002b60:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <UART_SetConfig+0x354>)
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	220c      	movs	r2, #12
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d020      	beq.n	8002bae <UART_SetConfig+0x182>
 8002b6c:	d827      	bhi.n	8002bbe <UART_SetConfig+0x192>
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d00d      	beq.n	8002b8e <UART_SetConfig+0x162>
 8002b72:	d824      	bhi.n	8002bbe <UART_SetConfig+0x192>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <UART_SetConfig+0x152>
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d010      	beq.n	8002b9e <UART_SetConfig+0x172>
 8002b7c:	e01f      	b.n	8002bbe <UART_SetConfig+0x192>
 8002b7e:	231b      	movs	r3, #27
 8002b80:	2220      	movs	r2, #32
 8002b82:	4694      	mov	ip, r2
 8002b84:	44bc      	add	ip, r7
 8002b86:	4463      	add	r3, ip
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e133      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b8e:	231b      	movs	r3, #27
 8002b90:	2220      	movs	r2, #32
 8002b92:	4694      	mov	ip, r2
 8002b94:	44bc      	add	ip, r7
 8002b96:	4463      	add	r3, ip
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e12b      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	4694      	mov	ip, r2
 8002ba4:	44bc      	add	ip, r7
 8002ba6:	4463      	add	r3, ip
 8002ba8:	2204      	movs	r2, #4
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e123      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002bae:	231b      	movs	r3, #27
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4694      	mov	ip, r2
 8002bb4:	44bc      	add	ip, r7
 8002bb6:	4463      	add	r3, ip
 8002bb8:	2208      	movs	r2, #8
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e11b      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	4694      	mov	ip, r2
 8002bc4:	44bc      	add	ip, r7
 8002bc6:	4463      	add	r3, ip
 8002bc8:	2210      	movs	r2, #16
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e113      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <UART_SetConfig+0x35c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d136      	bne.n	8002c46 <UART_SetConfig+0x21a>
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <UART_SetConfig+0x354>)
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	2230      	movs	r2, #48	; 0x30
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d020      	beq.n	8002c26 <UART_SetConfig+0x1fa>
 8002be4:	d827      	bhi.n	8002c36 <UART_SetConfig+0x20a>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d00d      	beq.n	8002c06 <UART_SetConfig+0x1da>
 8002bea:	d824      	bhi.n	8002c36 <UART_SetConfig+0x20a>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <UART_SetConfig+0x1ca>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d010      	beq.n	8002c16 <UART_SetConfig+0x1ea>
 8002bf4:	e01f      	b.n	8002c36 <UART_SetConfig+0x20a>
 8002bf6:	231b      	movs	r3, #27
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4694      	mov	ip, r2
 8002bfc:	44bc      	add	ip, r7
 8002bfe:	4463      	add	r3, ip
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e0f7      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2220      	movs	r2, #32
 8002c0a:	4694      	mov	ip, r2
 8002c0c:	44bc      	add	ip, r7
 8002c0e:	4463      	add	r3, ip
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e0ef      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c16:	231b      	movs	r3, #27
 8002c18:	2220      	movs	r2, #32
 8002c1a:	4694      	mov	ip, r2
 8002c1c:	44bc      	add	ip, r7
 8002c1e:	4463      	add	r3, ip
 8002c20:	2204      	movs	r2, #4
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e0e7      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c26:	231b      	movs	r3, #27
 8002c28:	2220      	movs	r2, #32
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	44bc      	add	ip, r7
 8002c2e:	4463      	add	r3, ip
 8002c30:	2208      	movs	r2, #8
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e0df      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c36:	231b      	movs	r3, #27
 8002c38:	2220      	movs	r2, #32
 8002c3a:	4694      	mov	ip, r2
 8002c3c:	44bc      	add	ip, r7
 8002c3e:	4463      	add	r3, ip
 8002c40:	2210      	movs	r2, #16
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e0d7      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <UART_SetConfig+0x360>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d107      	bne.n	8002c60 <UART_SetConfig+0x234>
 8002c50:	231b      	movs	r3, #27
 8002c52:	2220      	movs	r2, #32
 8002c54:	4694      	mov	ip, r2
 8002c56:	44bc      	add	ip, r7
 8002c58:	4463      	add	r3, ip
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e0ca      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4a      	ldr	r2, [pc, #296]	; (8002d90 <UART_SetConfig+0x364>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d107      	bne.n	8002c7a <UART_SetConfig+0x24e>
 8002c6a:	231b      	movs	r3, #27
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	4694      	mov	ip, r2
 8002c70:	44bc      	add	ip, r7
 8002c72:	4463      	add	r3, ip
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e0bd      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a45      	ldr	r2, [pc, #276]	; (8002d94 <UART_SetConfig+0x368>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d107      	bne.n	8002c94 <UART_SetConfig+0x268>
 8002c84:	231b      	movs	r3, #27
 8002c86:	2220      	movs	r2, #32
 8002c88:	4694      	mov	ip, r2
 8002c8a:	44bc      	add	ip, r7
 8002c8c:	4463      	add	r3, ip
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e0b0      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a35      	ldr	r2, [pc, #212]	; (8002d70 <UART_SetConfig+0x344>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d143      	bne.n	8002d26 <UART_SetConfig+0x2fa>
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <UART_SetConfig+0x354>)
 8002ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	22c0      	movs	r2, #192	; 0xc0
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d02a      	beq.n	8002d06 <UART_SetConfig+0x2da>
 8002cb0:	22c0      	movs	r2, #192	; 0xc0
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d82e      	bhi.n	8002d16 <UART_SetConfig+0x2ea>
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d012      	beq.n	8002ce6 <UART_SetConfig+0x2ba>
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d826      	bhi.n	8002d16 <UART_SetConfig+0x2ea>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <UART_SetConfig+0x2aa>
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	00d2      	lsls	r2, r2, #3
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d010      	beq.n	8002cf6 <UART_SetConfig+0x2ca>
 8002cd4:	e01f      	b.n	8002d16 <UART_SetConfig+0x2ea>
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2220      	movs	r2, #32
 8002cda:	4694      	mov	ip, r2
 8002cdc:	44bc      	add	ip, r7
 8002cde:	4463      	add	r3, ip
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e087      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002ce6:	231b      	movs	r3, #27
 8002ce8:	2220      	movs	r2, #32
 8002cea:	4694      	mov	ip, r2
 8002cec:	44bc      	add	ip, r7
 8002cee:	4463      	add	r3, ip
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e07f      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002cf6:	231b      	movs	r3, #27
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4694      	mov	ip, r2
 8002cfc:	44bc      	add	ip, r7
 8002cfe:	4463      	add	r3, ip
 8002d00:	2204      	movs	r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e077      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002d06:	231b      	movs	r3, #27
 8002d08:	2220      	movs	r2, #32
 8002d0a:	4694      	mov	ip, r2
 8002d0c:	44bc      	add	ip, r7
 8002d0e:	4463      	add	r3, ip
 8002d10:	2208      	movs	r2, #8
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e06f      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002d16:	231b      	movs	r3, #27
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	44bc      	add	ip, r7
 8002d1e:	4463      	add	r3, ip
 8002d20:	2210      	movs	r2, #16
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e067      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <UART_SetConfig+0x348>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d15b      	bne.n	8002de8 <UART_SetConfig+0x3bc>
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <UART_SetConfig+0x354>)
 8002d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d34:	23c0      	movs	r3, #192	; 0xc0
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	22c0      	movs	r2, #192	; 0xc0
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d042      	beq.n	8002dc8 <UART_SetConfig+0x39c>
 8002d42:	22c0      	movs	r2, #192	; 0xc0
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d846      	bhi.n	8002dd8 <UART_SetConfig+0x3ac>
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	0092      	lsls	r2, r2, #2
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02a      	beq.n	8002da8 <UART_SetConfig+0x37c>
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d83e      	bhi.n	8002dd8 <UART_SetConfig+0x3ac>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01c      	beq.n	8002d98 <UART_SetConfig+0x36c>
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	0052      	lsls	r2, r2, #1
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d028      	beq.n	8002db8 <UART_SetConfig+0x38c>
 8002d66:	e037      	b.n	8002dd8 <UART_SetConfig+0x3ac>
 8002d68:	cfff69f3 	.word	0xcfff69f3
 8002d6c:	ffffcfff 	.word	0xffffcfff
 8002d70:	40008000 	.word	0x40008000
 8002d74:	40008400 	.word	0x40008400
 8002d78:	11fff4ff 	.word	0x11fff4ff
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40004400 	.word	0x40004400
 8002d88:	40004800 	.word	0x40004800
 8002d8c:	40004c00 	.word	0x40004c00
 8002d90:	40005000 	.word	0x40005000
 8002d94:	40013c00 	.word	0x40013c00
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4694      	mov	ip, r2
 8002d9e:	44bc      	add	ip, r7
 8002da0:	4463      	add	r3, ip
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e026      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2220      	movs	r2, #32
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e01e      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002db8:	231b      	movs	r3, #27
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4694      	mov	ip, r2
 8002dbe:	44bc      	add	ip, r7
 8002dc0:	4463      	add	r3, ip
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e016      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002dc8:	231b      	movs	r3, #27
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4694      	mov	ip, r2
 8002dce:	44bc      	add	ip, r7
 8002dd0:	4463      	add	r3, ip
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e00e      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002dd8:	231b      	movs	r3, #27
 8002dda:	2220      	movs	r2, #32
 8002ddc:	4694      	mov	ip, r2
 8002dde:	44bc      	add	ip, r7
 8002de0:	4463      	add	r3, ip
 8002de2:	2210      	movs	r2, #16
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e006      	b.n	8002df6 <UART_SetConfig+0x3ca>
 8002de8:	231b      	movs	r3, #27
 8002dea:	2220      	movs	r2, #32
 8002dec:	4694      	mov	ip, r2
 8002dee:	44bc      	add	ip, r7
 8002df0:	4463      	add	r3, ip
 8002df2:	2210      	movs	r2, #16
 8002df4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4ab8      	ldr	r2, [pc, #736]	; (80030dc <UART_SetConfig+0x6b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d005      	beq.n	8002e0c <UART_SetConfig+0x3e0>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4ab6      	ldr	r2, [pc, #728]	; (80030e0 <UART_SetConfig+0x6b4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d000      	beq.n	8002e0c <UART_SetConfig+0x3e0>
 8002e0a:	e097      	b.n	8002f3c <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	2220      	movs	r2, #32
 8002e10:	4694      	mov	ip, r2
 8002e12:	44bc      	add	ip, r7
 8002e14:	4463      	add	r3, ip
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d015      	beq.n	8002e48 <UART_SetConfig+0x41c>
 8002e1c:	dc18      	bgt.n	8002e50 <UART_SetConfig+0x424>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00d      	beq.n	8002e3e <UART_SetConfig+0x412>
 8002e22:	dc15      	bgt.n	8002e50 <UART_SetConfig+0x424>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <UART_SetConfig+0x402>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d005      	beq.n	8002e38 <UART_SetConfig+0x40c>
 8002e2c:	e010      	b.n	8002e50 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7fe fef3 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002e32:	0003      	movs	r3, r0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e36:	e015      	b.n	8002e64 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e38:	4baa      	ldr	r3, [pc, #680]	; (80030e4 <UART_SetConfig+0x6b8>)
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e3c:	e012      	b.n	8002e64 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3e:	f7fe fe5f 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8002e42:	0003      	movs	r3, r0
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e46:	e00d      	b.n	8002e64 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e4e:	e009      	b.n	8002e64 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e54:	231a      	movs	r3, #26
 8002e56:	2220      	movs	r2, #32
 8002e58:	4694      	mov	ip, r2
 8002e5a:	44bc      	add	ip, r7
 8002e5c:	4463      	add	r3, ip
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
        break;
 8002e62:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d100      	bne.n	8002e6c <UART_SetConfig+0x440>
 8002e6a:	e146      	b.n	80030fa <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e70:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <UART_SetConfig+0x6bc>)
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	5ad3      	ldrh	r3, [r2, r3]
 8002e76:	0019      	movs	r1, r3
 8002e78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e7a:	f7fd f943 	bl	8000104 <__udivsi3>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	0013      	movs	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d305      	bcc.n	8002e9e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d907      	bls.n	8002eae <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8002e9e:	231a      	movs	r3, #26
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	4694      	mov	ip, r2
 8002ea4:	44bc      	add	ip, r7
 8002ea6:	4463      	add	r3, ip
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e045      	b.n	8002f3a <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <UART_SetConfig+0x6bc>)
 8002ebc:	0052      	lsls	r2, r2, #1
 8002ebe:	5ad3      	ldrh	r3, [r2, r3]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	69b8      	ldr	r0, [r7, #24]
 8002ecc:	69f9      	ldr	r1, [r7, #28]
 8002ece:	f7fd fa8f 	bl	80003f0 <__aeabi_uldivmod>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	000b      	movs	r3, r1
 8002ed6:	0e11      	lsrs	r1, r2, #24
 8002ed8:	021d      	lsls	r5, r3, #8
 8002eda:	430d      	orrs	r5, r1
 8002edc:	0214      	lsls	r4, r2, #8
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	1900      	adds	r0, r0, r4
 8002ef0:	4169      	adcs	r1, r5
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f7fd fa76 	bl	80003f0 <__aeabi_uldivmod>
 8002f04:	0002      	movs	r2, r0
 8002f06:	000b      	movs	r3, r1
 8002f08:	0013      	movs	r3, r2
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d309      	bcc.n	8002f2a <UART_SetConfig+0x4fe>
 8002f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	035b      	lsls	r3, r3, #13
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d204      	bcs.n	8002f2a <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e007      	b.n	8002f3a <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8002f2a:	231a      	movs	r3, #26
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	4694      	mov	ip, r2
 8002f30:	44bc      	add	ip, r7
 8002f32:	4463      	add	r3, ip
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002f38:	e0df      	b.n	80030fa <UART_SetConfig+0x6ce>
 8002f3a:	e0de      	b.n	80030fa <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d000      	beq.n	8002f4a <UART_SetConfig+0x51e>
 8002f48:	e074      	b.n	8003034 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8002f4a:	231b      	movs	r3, #27
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	4694      	mov	ip, r2
 8002f50:	44bc      	add	ip, r7
 8002f52:	4463      	add	r3, ip
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d015      	beq.n	8002f86 <UART_SetConfig+0x55a>
 8002f5a:	dc18      	bgt.n	8002f8e <UART_SetConfig+0x562>
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d00d      	beq.n	8002f7c <UART_SetConfig+0x550>
 8002f60:	dc15      	bgt.n	8002f8e <UART_SetConfig+0x562>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <UART_SetConfig+0x540>
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d005      	beq.n	8002f76 <UART_SetConfig+0x54a>
 8002f6a:	e010      	b.n	8002f8e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7fe fe54 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002f70:	0003      	movs	r3, r0
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f74:	e015      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <UART_SetConfig+0x6b8>)
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f7a:	e012      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7c:	f7fe fdc0 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8002f80:	0003      	movs	r3, r0
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f8c:	e009      	b.n	8002fa2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f92:	231a      	movs	r3, #26
 8002f94:	2220      	movs	r2, #32
 8002f96:	4694      	mov	ip, r2
 8002f98:	44bc      	add	ip, r7
 8002f9a:	4463      	add	r3, ip
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
        break;
 8002fa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d100      	bne.n	8002faa <UART_SetConfig+0x57e>
 8002fa8:	e0a7      	b.n	80030fa <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <UART_SetConfig+0x6bc>)
 8002fb0:	0052      	lsls	r2, r2, #1
 8002fb2:	5ad3      	ldrh	r3, [r2, r3]
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fb8:	f7fd f8a4 	bl	8000104 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	005a      	lsls	r2, r3, #1
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	18d2      	adds	r2, r2, r3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	0019      	movs	r1, r3
 8002fce:	0010      	movs	r0, r2
 8002fd0:	f7fd f898 	bl	8000104 <__udivsi3>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d921      	bls.n	8003024 <UART_SetConfig+0x5f8>
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d21c      	bcs.n	8003024 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	200e      	movs	r0, #14
 8002ff0:	2420      	movs	r4, #32
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	181b      	adds	r3, r3, r0
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	b29b      	uxth	r3, r3
 8003002:	2207      	movs	r2, #7
 8003004:	4013      	ands	r3, r2
 8003006:	b299      	uxth	r1, r3
 8003008:	193b      	adds	r3, r7, r4
 800300a:	181b      	adds	r3, r3, r0
 800300c:	193a      	adds	r2, r7, r4
 800300e:	1812      	adds	r2, r2, r0
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	193a      	adds	r2, r7, r4
 800301c:	1812      	adds	r2, r2, r0
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e06a      	b.n	80030fa <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003024:	231a      	movs	r3, #26
 8003026:	2220      	movs	r2, #32
 8003028:	4694      	mov	ip, r2
 800302a:	44bc      	add	ip, r7
 800302c:	4463      	add	r3, ip
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e062      	b.n	80030fa <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003034:	231b      	movs	r3, #27
 8003036:	2220      	movs	r2, #32
 8003038:	4694      	mov	ip, r2
 800303a:	44bc      	add	ip, r7
 800303c:	4463      	add	r3, ip
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d015      	beq.n	8003070 <UART_SetConfig+0x644>
 8003044:	dc18      	bgt.n	8003078 <UART_SetConfig+0x64c>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00d      	beq.n	8003066 <UART_SetConfig+0x63a>
 800304a:	dc15      	bgt.n	8003078 <UART_SetConfig+0x64c>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <UART_SetConfig+0x62a>
 8003050:	2b02      	cmp	r3, #2
 8003052:	d005      	beq.n	8003060 <UART_SetConfig+0x634>
 8003054:	e010      	b.n	8003078 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7fe fddf 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 800305a:	0003      	movs	r3, r0
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800305e:	e015      	b.n	800308c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <UART_SetConfig+0x6b8>)
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003064:	e012      	b.n	800308c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7fe fd4b 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 800306a:	0003      	movs	r3, r0
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800306e:	e00d      	b.n	800308c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003076:	e009      	b.n	800308c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800307c:	231a      	movs	r3, #26
 800307e:	2220      	movs	r2, #32
 8003080:	4694      	mov	ip, r2
 8003082:	44bc      	add	ip, r7
 8003084:	4463      	add	r3, ip
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
        break;
 800308a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d033      	beq.n	80030fa <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <UART_SetConfig+0x6bc>)
 8003098:	0052      	lsls	r2, r2, #1
 800309a:	5ad3      	ldrh	r3, [r2, r3]
 800309c:	0019      	movs	r1, r3
 800309e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030a0:	f7fd f830 	bl	8000104 <__udivsi3>
 80030a4:	0003      	movs	r3, r0
 80030a6:	001a      	movs	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	18d2      	adds	r2, r2, r3
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0019      	movs	r1, r3
 80030b6:	0010      	movs	r0, r2
 80030b8:	f7fd f824 	bl	8000104 <__udivsi3>
 80030bc:	0003      	movs	r3, r0
 80030be:	b29b      	uxth	r3, r3
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d911      	bls.n	80030ec <UART_SetConfig+0x6c0>
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	025b      	lsls	r3, r3, #9
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d20c      	bcs.n	80030ec <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	e00e      	b.n	80030fa <UART_SetConfig+0x6ce>
 80030dc:	40008000 	.word	0x40008000
 80030e0:	40008400 	.word	0x40008400
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	08004748 	.word	0x08004748
      }
      else
      {
        ret = HAL_ERROR;
 80030ec:	231a      	movs	r3, #26
 80030ee:	2220      	movs	r2, #32
 80030f0:	4694      	mov	ip, r2
 80030f2:	44bc      	add	ip, r7
 80030f4:	4463      	add	r3, ip
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	226a      	movs	r2, #106	; 0x6a
 80030fe:	2101      	movs	r1, #1
 8003100:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2268      	movs	r2, #104	; 0x68
 8003106:	2101      	movs	r1, #1
 8003108:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2200      	movs	r2, #0
 800310e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	2200      	movs	r2, #0
 8003114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003116:	231a      	movs	r3, #26
 8003118:	2220      	movs	r2, #32
 800311a:	4694      	mov	ip, r2
 800311c:	44bc      	add	ip, r7
 800311e:	4463      	add	r3, ip
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b010      	add	sp, #64	; 0x40
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)

0800312c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d00b      	beq.n	8003156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a4a      	ldr	r2, [pc, #296]	; (8003270 <UART_AdvFeatureConfig+0x144>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	2202      	movs	r2, #2
 800315c:	4013      	ands	r3, r2
 800315e:	d00b      	beq.n	8003178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a43      	ldr	r2, [pc, #268]	; (8003274 <UART_AdvFeatureConfig+0x148>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d00b      	beq.n	800319a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <UART_AdvFeatureConfig+0x14c>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	2208      	movs	r2, #8
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a34      	ldr	r2, [pc, #208]	; (800327c <UART_AdvFeatureConfig+0x150>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2210      	movs	r2, #16
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00b      	beq.n	80031de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <UART_AdvFeatureConfig+0x154>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2220      	movs	r2, #32
 80031e4:	4013      	ands	r3, r2
 80031e6:	d00b      	beq.n	8003200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <UART_AdvFeatureConfig+0x158>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	d01d      	beq.n	8003246 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <UART_AdvFeatureConfig+0x15c>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	035b      	lsls	r3, r3, #13
 800322a:	429a      	cmp	r2, r3
 800322c:	d10b      	bne.n	8003246 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <UART_AdvFeatureConfig+0x160>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	4013      	ands	r3, r2
 800324e:	d00b      	beq.n	8003268 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <UART_AdvFeatureConfig+0x164>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fffdffff 	.word	0xfffdffff
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	fffbffff 	.word	0xfffbffff
 800327c:	ffff7fff 	.word	0xffff7fff
 8003280:	ffffefff 	.word	0xffffefff
 8003284:	ffffdfff 	.word	0xffffdfff
 8003288:	ffefffff 	.word	0xffefffff
 800328c:	ff9fffff 	.word	0xff9fffff
 8003290:	fff7ffff 	.word	0xfff7ffff

08003294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	228c      	movs	r2, #140	; 0x8c
 80032a0:	2100      	movs	r1, #0
 80032a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a4:	f7fd fc1c 	bl	8000ae0 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2208      	movs	r2, #8
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d10c      	bne.n	80032d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	0391      	lsls	r1, r2, #14
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <UART_CheckIdleState+0x90>)
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f000 f82e 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e023      	b.n	800331c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d10c      	bne.n	80032fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	03d1      	lsls	r1, r2, #15
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <UART_CheckIdleState+0x90>)
 80032ec:	9200      	str	r2, [sp, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f000 f81a 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e00f      	b.n	800331c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2284      	movs	r2, #132	; 0x84
 8003300:	2120      	movs	r1, #32
 8003302:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2288      	movs	r2, #136	; 0x88
 8003308:	2120      	movs	r1, #32
 800330a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}
 8003324:	01ffffff 	.word	0x01ffffff

08003328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b094      	sub	sp, #80	; 0x50
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003338:	e0a7      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	3301      	adds	r3, #1
 800333e:	d100      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003340:	e0a3      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fd fbcd 	bl	8000ae0 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <UART_WaitOnFlagUntilTimeout+0x30>
 8003352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003354:	2b00      	cmp	r3, #0
 8003356:	d13f      	bne.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003358:	f3ef 8310 	mrs	r3, PRIMASK
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003360:	647b      	str	r3, [r7, #68]	; 0x44
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	494e      	ldr	r1, [pc, #312]	; (80034b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800337a:	400a      	ands	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338a:	f3ef 8310 	mrs	r3, PRIMASK
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
 8003394:	2301      	movs	r3, #1
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	438a      	bics	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2284      	movs	r2, #132	; 0x84
 80033c0:	2120      	movs	r1, #32
 80033c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2288      	movs	r2, #136	; 0x88
 80033c8:	2120      	movs	r1, #32
 80033ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e069      	b.n	80034ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d052      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	401a      	ands	r2, r3
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d148      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003402:	f3ef 8310 	mrs	r3, PRIMASK
 8003406:	613b      	str	r3, [r7, #16]
  return(result);
 8003408:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4924      	ldr	r1, [pc, #144]	; (80034b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003424:	400a      	ands	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003434:	f3ef 8310 	mrs	r3, PRIMASK
 8003438:	61fb      	str	r3, [r7, #28]
  return(result);
 800343a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343c:	64bb      	str	r3, [r7, #72]	; 0x48
 800343e:	2301      	movs	r3, #1
 8003440:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	438a      	bics	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2284      	movs	r2, #132	; 0x84
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2288      	movs	r2, #136	; 0x88
 8003472:	2120      	movs	r1, #32
 8003474:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	228c      	movs	r2, #140	; 0x8c
 800347a:	2120      	movs	r1, #32
 800347c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e010      	b.n	80034ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	425a      	negs	r2, r3
 800349a:	4153      	adcs	r3, r2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	001a      	movs	r2, r3
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d100      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0x182>
 80034a8:	e747      	b.n	800333a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b014      	add	sp, #80	; 0x50
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	fffffe5f 	.word	0xfffffe5f

080034b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b094      	sub	sp, #80	; 0x50
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	1dbb      	adds	r3, r7, #6
 80034c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1dba      	adds	r2, r7, #6
 80034d0:	215c      	movs	r1, #92	; 0x5c
 80034d2:	8812      	ldrh	r2, [r2, #0]
 80034d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1dba      	adds	r2, r7, #6
 80034da:	215e      	movs	r1, #94	; 0x5e
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	015b      	lsls	r3, r3, #5
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d10d      	bne.n	800350e <UART_Start_Receive_IT+0x56>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <UART_Start_Receive_IT+0x4c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2260      	movs	r2, #96	; 0x60
 80034fe:	496f      	ldr	r1, [pc, #444]	; (80036bc <UART_Start_Receive_IT+0x204>)
 8003500:	5299      	strh	r1, [r3, r2]
 8003502:	e02e      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2260      	movs	r2, #96	; 0x60
 8003508:	21ff      	movs	r1, #255	; 0xff
 800350a:	5299      	strh	r1, [r3, r2]
 800350c:	e029      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <UART_Start_Receive_IT+0x7a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <UART_Start_Receive_IT+0x70>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2260      	movs	r2, #96	; 0x60
 8003522:	21ff      	movs	r1, #255	; 0xff
 8003524:	5299      	strh	r1, [r3, r2]
 8003526:	e01c      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2260      	movs	r2, #96	; 0x60
 800352c:	217f      	movs	r1, #127	; 0x7f
 800352e:	5299      	strh	r1, [r3, r2]
 8003530:	e017      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	055b      	lsls	r3, r3, #21
 800353a:	429a      	cmp	r2, r3
 800353c:	d10d      	bne.n	800355a <UART_Start_Receive_IT+0xa2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <UART_Start_Receive_IT+0x98>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2260      	movs	r2, #96	; 0x60
 800354a:	217f      	movs	r1, #127	; 0x7f
 800354c:	5299      	strh	r1, [r3, r2]
 800354e:	e008      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2260      	movs	r2, #96	; 0x60
 8003554:	213f      	movs	r1, #63	; 0x3f
 8003556:	5299      	strh	r1, [r3, r2]
 8003558:	e003      	b.n	8003562 <UART_Start_Receive_IT+0xaa>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2260      	movs	r2, #96	; 0x60
 800355e:	2100      	movs	r1, #0
 8003560:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	228c      	movs	r2, #140	; 0x8c
 8003566:	2100      	movs	r1, #0
 8003568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2288      	movs	r2, #136	; 0x88
 800356e:	2122      	movs	r1, #34	; 0x22
 8003570:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	2301      	movs	r3, #1
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	059b      	lsls	r3, r3, #22
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d150      	bne.n	8003652 <UART_Start_Receive_IT+0x19a>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2268      	movs	r2, #104	; 0x68
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	1dba      	adds	r2, r7, #6
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d349      	bcc.n	8003652 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d107      	bne.n	80035da <UART_Start_Receive_IT+0x122>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <UART_Start_Receive_IT+0x208>)
 80035d6:	671a      	str	r2, [r3, #112]	; 0x70
 80035d8:	e002      	b.n	80035e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <UART_Start_Receive_IT+0x20c>)
 80035de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80035ee:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f2:	2301      	movs	r3, #1
 80035f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0049      	lsls	r1, r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361c:	f3ef 8310 	mrs	r3, PRIMASK
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003624:	647b      	str	r3, [r7, #68]	; 0x44
 8003626:	2301      	movs	r3, #1
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0549      	lsls	r1, r1, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	e02e      	b.n	80036b0 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	015b      	lsls	r3, r3, #5
 800365a:	429a      	cmp	r2, r3
 800365c:	d107      	bne.n	800366e <UART_Start_Receive_IT+0x1b6>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <UART_Start_Receive_IT+0x210>)
 800366a:	671a      	str	r2, [r3, #112]	; 0x70
 800366c:	e002      	b.n	8003674 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a16      	ldr	r2, [pc, #88]	; (80036cc <UART_Start_Receive_IT+0x214>)
 8003672:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	613b      	str	r3, [r7, #16]
  return(result);
 8003682:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
 8003686:	2301      	movs	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2190      	movs	r1, #144	; 0x90
 800369e:	0049      	lsls	r1, r1, #1
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f383 8810 	msr	PRIMASK, r3
}
 80036ae:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b014      	add	sp, #80	; 0x50
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	000001ff 	.word	0x000001ff
 80036c0:	08004131 	.word	0x08004131
 80036c4:	08003e4d 	.word	0x08003e4d
 80036c8:	08003ce1 	.word	0x08003ce1
 80036cc:	08003b75 	.word	0x08003b75

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	617b      	str	r3, [r7, #20]
  return(result);
 80036de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	2301      	movs	r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4926      	ldr	r1, [pc, #152]	; (8003794 <UART_EndRxTransfer+0xc4>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	623b      	str	r3, [r7, #32]
  return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <UART_EndRxTransfer+0xc8>)
 800372c:	400a      	ands	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d118      	bne.n	8003776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003744:	f3ef 8310 	mrs	r3, PRIMASK
 8003748:	60bb      	str	r3, [r7, #8]
  return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	2301      	movs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2110      	movs	r1, #16
 8003766:	438a      	bics	r2, r1
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2288      	movs	r2, #136	; 0x88
 800377a:	2120      	movs	r1, #32
 800377c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	671a      	str	r2, [r3, #112]	; 0x70
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b00e      	add	sp, #56	; 0x38
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	fffffedf 	.word	0xfffffedf
 8003798:	effffffe 	.word	0xeffffffe

0800379c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	225e      	movs	r2, #94	; 0x5e
 80037ae:	2100      	movs	r1, #0
 80037b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2256      	movs	r2, #86	; 0x56
 80037b6:	2100      	movs	r1, #0
 80037b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7ff f921 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	; 0x28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2284      	movs	r2, #132	; 0x84
 80037d6:	589b      	ldr	r3, [r3, r2]
 80037d8:	2b21      	cmp	r3, #33	; 0x21
 80037da:	d14c      	bne.n	8003876 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2256      	movs	r2, #86	; 0x56
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d132      	bne.n	800384e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ee:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	2301      	movs	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	438a      	bics	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f383 8810 	msr	PRIMASK, r3
}
 8003818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8310 	mrs	r3, PRIMASK
 800381e:	617b      	str	r3, [r7, #20]
  return(result);
 8003820:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	2301      	movs	r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2140      	movs	r1, #64	; 0x40
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800384c:	e013      	b.n	8003876 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2256      	movs	r2, #86	; 0x56
 8003868:	5a9b      	ldrh	r3, [r3, r2]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b299      	uxth	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2256      	movs	r2, #86	; 0x56
 8003874:	5299      	strh	r1, [r3, r2]
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b00a      	add	sp, #40	; 0x28
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08c      	sub	sp, #48	; 0x30
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2284      	movs	r2, #132	; 0x84
 800388a:	589b      	ldr	r3, [r3, r2]
 800388c:	2b21      	cmp	r3, #33	; 0x21
 800388e:	d151      	bne.n	8003934 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2256      	movs	r2, #86	; 0x56
 8003894:	5a9b      	ldrh	r3, [r3, r2]
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d132      	bne.n	8003902 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a6:	2301      	movs	r3, #1
 80038a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f383 8810 	msr	PRIMASK, r3
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	438a      	bics	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f383 8810 	msr	PRIMASK, r3
}
 80038cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f383 8810 	msr	PRIMASK, r3
}
 80038fe:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003900:	e018      	b.n	8003934 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	05d2      	lsls	r2, r2, #23
 8003914:	0dd2      	lsrs	r2, r2, #23
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2256      	movs	r2, #86	; 0x56
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b299      	uxth	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2256      	movs	r2, #86	; 0x56
 8003932:	5299      	strh	r1, [r3, r2]
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b00c      	add	sp, #48	; 0x30
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2284      	movs	r2, #132	; 0x84
 8003948:	589b      	ldr	r3, [r3, r2]
 800394a:	2b21      	cmp	r3, #33	; 0x21
 800394c:	d165      	bne.n	8003a1a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800394e:	232e      	movs	r3, #46	; 0x2e
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	216a      	movs	r1, #106	; 0x6a
 8003956:	5a52      	ldrh	r2, [r2, r1]
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e059      	b.n	8003a10 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2256      	movs	r2, #86	; 0x56
 8003960:	5a9b      	ldrh	r3, [r3, r2]
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d133      	bne.n	80039d0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003968:	f3ef 8310 	mrs	r3, PRIMASK
 800396c:	60fb      	str	r3, [r7, #12]
  return(result);
 800396e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
 8003972:	2301      	movs	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4926      	ldr	r1, [pc, #152]	; (8003a24 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800398a:	400a      	ands	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	61bb      	str	r3, [r7, #24]
  return(result);
 80039a0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	2301      	movs	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80039cc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80039ce:	e024      	b.n	8003a1a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d013      	beq.n	8003a04 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2256      	movs	r2, #86	; 0x56
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b299      	uxth	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2256      	movs	r2, #86	; 0x56
 8003a02:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a04:	212e      	movs	r1, #46	; 0x2e
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	232e      	movs	r3, #46	; 0x2e
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1a0      	bne.n	800395c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b00c      	add	sp, #48	; 0x30
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	ff7fffff 	.word	0xff7fffff

08003a28 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2284      	movs	r2, #132	; 0x84
 8003a34:	589b      	ldr	r3, [r3, r2]
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d16a      	bne.n	8003b10 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a3a:	232e      	movs	r3, #46	; 0x2e
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	216a      	movs	r1, #106	; 0x6a
 8003a42:	5a52      	ldrh	r2, [r2, r1]
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e05e      	b.n	8003b06 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2256      	movs	r2, #86	; 0x56
 8003a4c:	5a9b      	ldrh	r3, [r3, r2]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d133      	bne.n	8003abc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	2301      	movs	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4928      	ldr	r1, [pc, #160]	; (8003b18 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a8c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003ab8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003aba:	e029      	b.n	8003b10 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d018      	beq.n	8003afa <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	05d2      	lsls	r2, r2, #23
 8003ada:	0dd2      	lsrs	r2, r2, #23
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2256      	movs	r2, #86	; 0x56
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b299      	uxth	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2256      	movs	r2, #86	; 0x56
 8003af8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003afa:	212e      	movs	r1, #46	; 0x2e
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	232e      	movs	r3, #46	; 0x2e
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d19b      	bne.n	8003a48 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b00c      	add	sp, #48	; 0x30
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	ff7fffff 	.word	0xff7fffff

08003b1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2284      	movs	r2, #132	; 0x84
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7fe ff44 	bl	80029f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b006      	add	sp, #24
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b090      	sub	sp, #64	; 0x40
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b7c:	203e      	movs	r0, #62	; 0x3e
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2160      	movs	r1, #96	; 0x60
 8003b84:	5a52      	ldrh	r2, [r2, r1]
 8003b86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2288      	movs	r2, #136	; 0x88
 8003b8c:	589b      	ldr	r3, [r3, r2]
 8003b8e:	2b22      	cmp	r3, #34	; 0x22
 8003b90:	d000      	beq.n	8003b94 <UART_RxISR_8BIT+0x20>
 8003b92:	e097      	b.n	8003cc4 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9a:	213c      	movs	r1, #60	; 0x3c
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b2d9      	uxtb	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	225e      	movs	r2, #94	; 0x5e
 8003bc4:	5a9b      	ldrh	r3, [r3, r2]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	225e      	movs	r2, #94	; 0x5e
 8003bd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	225e      	movs	r2, #94	; 0x5e
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d000      	beq.n	8003be0 <UART_RxISR_8BIT+0x6c>
 8003bde:	e079      	b.n	8003cd4 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003be6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4936      	ldr	r1, [pc, #216]	; (8003cdc <UART_RxISR_8BIT+0x168>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2288      	movs	r2, #136	; 0x88
 8003c48:	2120      	movs	r1, #32
 8003c4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d12f      	bne.n	8003cba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c66:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2110      	movs	r1, #16
 8003c82:	438a      	bics	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d103      	bne.n	8003ca8 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	225c      	movs	r2, #92	; 0x5c
 8003cac:	5a9a      	ldrh	r2, [r3, r2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7fe feae 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cb8:	e00c      	b.n	8003cd4 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7fc fcad 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003cc2:	e007      	b.n	8003cd4 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2108      	movs	r1, #8
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b010      	add	sp, #64	; 0x40
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fffffedf 	.word	0xfffffedf

08003ce0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b090      	sub	sp, #64	; 0x40
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ce8:	203e      	movs	r0, #62	; 0x3e
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	2160      	movs	r1, #96	; 0x60
 8003cf0:	5a52      	ldrh	r2, [r2, r1]
 8003cf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2288      	movs	r2, #136	; 0x88
 8003cf8:	589b      	ldr	r3, [r3, r2]
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	d000      	beq.n	8003d00 <UART_RxISR_16BIT+0x20>
 8003cfe:	e097      	b.n	8003e30 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d06:	213c      	movs	r1, #60	; 0x3c
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	183a      	adds	r2, r7, r0
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	225e      	movs	r2, #94	; 0x5e
 8003d30:	5a9b      	ldrh	r3, [r3, r2]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b299      	uxth	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	225e      	movs	r2, #94	; 0x5e
 8003d3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	225e      	movs	r2, #94	; 0x5e
 8003d42:	5a9b      	ldrh	r3, [r3, r2]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d000      	beq.n	8003d4c <UART_RxISR_16BIT+0x6c>
 8003d4a:	e079      	b.n	8003e40 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	617b      	str	r3, [r7, #20]
  return(result);
 8003d52:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
 8003d56:	2301      	movs	r3, #1
 8003d58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4936      	ldr	r1, [pc, #216]	; (8003e48 <UART_RxISR_16BIT+0x168>)
 8003d6e:	400a      	ands	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d82:	623b      	str	r3, [r7, #32]
  return(result);
 8003d84:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
 8003d88:	2301      	movs	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	438a      	bics	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2288      	movs	r2, #136	; 0x88
 8003db4:	2120      	movs	r1, #32
 8003db6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d12f      	bne.n	8003e26 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2110      	movs	r1, #16
 8003dee:	438a      	bics	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2210      	movs	r2, #16
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d103      	bne.n	8003e14 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	225c      	movs	r2, #92	; 0x5c
 8003e18:	5a9a      	ldrh	r2, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7fe fdf8 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e24:	e00c      	b.n	8003e40 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fc fbf7 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003e2e:	e007      	b.n	8003e40 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b010      	add	sp, #64	; 0x40
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	fffffedf 	.word	0xfffffedf

08003e4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b09c      	sub	sp, #112	; 0x70
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e54:	236a      	movs	r3, #106	; 0x6a
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	2160      	movs	r1, #96	; 0x60
 8003e5c:	5a52      	ldrh	r2, [r2, r1]
 8003e5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2288      	movs	r2, #136	; 0x88
 8003e7c:	589b      	ldr	r3, [r3, r2]
 8003e7e:	2b22      	cmp	r3, #34	; 0x22
 8003e80:	d000      	beq.n	8003e84 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003e82:	e141      	b.n	8004108 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e84:	235e      	movs	r3, #94	; 0x5e
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	2168      	movs	r1, #104	; 0x68
 8003e8c:	5a52      	ldrh	r2, [r2, r1]
 8003e8e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e90:	e0e8      	b.n	8004064 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e98:	215c      	movs	r1, #92	; 0x5c
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	236a      	movs	r3, #106	; 0x6a
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b2d9      	uxtb	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	225e      	movs	r2, #94	; 0x5e
 8003ec4:	5a9b      	ldrh	r3, [r3, r2]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b299      	uxth	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	225e      	movs	r2, #94	; 0x5e
 8003ed0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	2207      	movs	r2, #7
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d049      	beq.n	8003f76 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d010      	beq.n	8003f0c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	228c      	movs	r2, #140	; 0x8c
 8003f00:	589b      	ldr	r3, [r3, r2]
 8003f02:	2201      	movs	r2, #1
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	218c      	movs	r1, #140	; 0x8c
 8003f0a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d00f      	beq.n	8003f34 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f16:	2201      	movs	r2, #1
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2202      	movs	r2, #2
 8003f22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	228c      	movs	r2, #140	; 0x8c
 8003f28:	589b      	ldr	r3, [r3, r2]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	218c      	movs	r1, #140	; 0x8c
 8003f32:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	2204      	movs	r2, #4
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d00f      	beq.n	8003f5c <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d00b      	beq.n	8003f5c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	228c      	movs	r2, #140	; 0x8c
 8003f50:	589b      	ldr	r3, [r3, r2]
 8003f52:	2202      	movs	r2, #2
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	218c      	movs	r1, #140	; 0x8c
 8003f5a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	228c      	movs	r2, #140	; 0x8c
 8003f60:	589b      	ldr	r3, [r3, r2]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fe fd4b 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	228c      	movs	r2, #140	; 0x8c
 8003f72:	2100      	movs	r1, #0
 8003f74:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	225e      	movs	r2, #94	; 0x5e
 8003f7a:	5a9b      	ldrh	r3, [r3, r2]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d170      	bne.n	8004064 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	495f      	ldr	r1, [pc, #380]	; (8004120 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4953      	ldr	r1, [pc, #332]	; (8004124 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2288      	movs	r2, #136	; 0x88
 8003fea:	2120      	movs	r1, #32
 8003fec:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d12f      	bne.n	800405c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	623b      	str	r3, [r7, #32]
  return(result);
 8004008:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400a:	653b      	str	r3, [r7, #80]	; 0x50
 800400c:	2301      	movs	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2110      	movs	r1, #16
 8004024:	438a      	bics	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2210      	movs	r2, #16
 800403c:	4013      	ands	r3, r2
 800403e:	2b10      	cmp	r3, #16
 8004040:	d103      	bne.n	800404a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2210      	movs	r2, #16
 8004048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	225c      	movs	r2, #92	; 0x5c
 800404e:	5a9a      	ldrh	r2, [r3, r2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f7fe fcdd 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
 800405a:	e003      	b.n	8004064 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f7fc fadc 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004064:	235e      	movs	r3, #94	; 0x5e
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	2220      	movs	r2, #32
 8004072:	4013      	ands	r3, r2
 8004074:	d000      	beq.n	8004078 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004076:	e70c      	b.n	8003e92 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004078:	204e      	movs	r0, #78	; 0x4e
 800407a:	183b      	adds	r3, r7, r0
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	215e      	movs	r1, #94	; 0x5e
 8004080:	5a52      	ldrh	r2, [r2, r1]
 8004082:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004084:	0001      	movs	r1, r0
 8004086:	187b      	adds	r3, r7, r1
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d044      	beq.n	8004118 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2268      	movs	r2, #104	; 0x68
 8004092:	5a9b      	ldrh	r3, [r3, r2]
 8004094:	187a      	adds	r2, r7, r1
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d23d      	bcs.n	8004118 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409c:	f3ef 8310 	mrs	r3, PRIMASK
 80040a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040a2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a6:	2301      	movs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	491a      	ldr	r1, [pc, #104]	; (8004128 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80040be:	400a      	ands	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a16      	ldr	r2, [pc, #88]	; (800412c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80040d2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	617b      	str	r3, [r7, #20]
  return(result);
 80040da:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2120      	movs	r1, #32
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004106:	e007      	b.n	8004118 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2108      	movs	r1, #8
 8004114:	430a      	orrs	r2, r1
 8004116:	619a      	str	r2, [r3, #24]
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b01c      	add	sp, #112	; 0x70
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffffeff 	.word	0xfffffeff
 8004124:	effffffe 	.word	0xeffffffe
 8004128:	efffffff 	.word	0xefffffff
 800412c:	08003b75 	.word	0x08003b75

08004130 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b09e      	sub	sp, #120	; 0x78
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004138:	2372      	movs	r3, #114	; 0x72
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	2160      	movs	r1, #96	; 0x60
 8004140:	5a52      	ldrh	r2, [r2, r1]
 8004142:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2288      	movs	r2, #136	; 0x88
 8004160:	589b      	ldr	r3, [r3, r2]
 8004162:	2b22      	cmp	r3, #34	; 0x22
 8004164:	d000      	beq.n	8004168 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004166:	e141      	b.n	80043ec <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004168:	2366      	movs	r3, #102	; 0x66
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	2168      	movs	r1, #104	; 0x68
 8004170:	5a52      	ldrh	r2, [r2, r1]
 8004172:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004174:	e0e8      	b.n	8004348 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800417c:	2164      	movs	r1, #100	; 0x64
 800417e:	187b      	adds	r3, r7, r1
 8004180:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004188:	187b      	adds	r3, r7, r1
 800418a:	2272      	movs	r2, #114	; 0x72
 800418c:	18ba      	adds	r2, r7, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	4013      	ands	r3, r2
 8004194:	b29a      	uxth	r2, r3
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	225e      	movs	r2, #94	; 0x5e
 80041a8:	5a9b      	ldrh	r3, [r3, r2]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b299      	uxth	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	225e      	movs	r2, #94	; 0x5e
 80041b4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c0:	2207      	movs	r2, #7
 80041c2:	4013      	ands	r3, r2
 80041c4:	d049      	beq.n	800425a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	2201      	movs	r2, #1
 80041ca:	4013      	ands	r3, r2
 80041cc:	d010      	beq.n	80041f0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80041ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	228c      	movs	r2, #140	; 0x8c
 80041e4:	589b      	ldr	r3, [r3, r2]
 80041e6:	2201      	movs	r2, #1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	218c      	movs	r1, #140	; 0x8c
 80041ee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f2:	2202      	movs	r2, #2
 80041f4:	4013      	ands	r3, r2
 80041f6:	d00f      	beq.n	8004218 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80041f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041fa:	2201      	movs	r2, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00b      	beq.n	8004218 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	228c      	movs	r2, #140	; 0x8c
 800420c:	589b      	ldr	r3, [r3, r2]
 800420e:	2204      	movs	r2, #4
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	218c      	movs	r1, #140	; 0x8c
 8004216:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421a:	2204      	movs	r2, #4
 800421c:	4013      	ands	r3, r2
 800421e:	d00f      	beq.n	8004240 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d00b      	beq.n	8004240 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2204      	movs	r2, #4
 800422e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	228c      	movs	r2, #140	; 0x8c
 8004234:	589b      	ldr	r3, [r3, r2]
 8004236:	2202      	movs	r2, #2
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	218c      	movs	r1, #140	; 0x8c
 800423e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	228c      	movs	r2, #140	; 0x8c
 8004244:	589b      	ldr	r3, [r3, r2]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7fe fbd9 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	228c      	movs	r2, #140	; 0x8c
 8004256:	2100      	movs	r1, #0
 8004258:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	225e      	movs	r2, #94	; 0x5e
 800425e:	5a9b      	ldrh	r3, [r3, r2]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d170      	bne.n	8004348 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004266:	f3ef 8310 	mrs	r3, PRIMASK
 800426a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004270:	2301      	movs	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	f383 8810 	msr	PRIMASK, r3
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	495f      	ldr	r1, [pc, #380]	; (8004404 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004288:	400a      	ands	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004298:	f3ef 8310 	mrs	r3, PRIMASK
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80042a2:	2301      	movs	r3, #1
 80042a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4953      	ldr	r1, [pc, #332]	; (8004408 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c4:	f383 8810 	msr	PRIMASK, r3
}
 80042c8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2288      	movs	r2, #136	; 0x88
 80042ce:	2120      	movs	r1, #32
 80042d0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d12f      	bne.n	8004340 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
 80042f0:	2301      	movs	r3, #1
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2110      	movs	r1, #16
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2210      	movs	r2, #16
 8004320:	4013      	ands	r3, r2
 8004322:	2b10      	cmp	r3, #16
 8004324:	d103      	bne.n	800432e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2210      	movs	r2, #16
 800432c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	225c      	movs	r2, #92	; 0x5c
 8004332:	5a9a      	ldrh	r2, [r3, r2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0011      	movs	r1, r2
 8004338:	0018      	movs	r0, r3
 800433a:	f7fe fb6b 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
 800433e:	e003      	b.n	8004348 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0018      	movs	r0, r3
 8004344:	f7fc f96a 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004348:	2366      	movs	r3, #102	; 0x66
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004354:	2220      	movs	r2, #32
 8004356:	4013      	ands	r3, r2
 8004358:	d000      	beq.n	800435c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800435a:	e70c      	b.n	8004176 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800435c:	2052      	movs	r0, #82	; 0x52
 800435e:	183b      	adds	r3, r7, r0
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	215e      	movs	r1, #94	; 0x5e
 8004364:	5a52      	ldrh	r2, [r2, r1]
 8004366:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004368:	0001      	movs	r1, r0
 800436a:	187b      	adds	r3, r7, r1
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d044      	beq.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2268      	movs	r2, #104	; 0x68
 8004376:	5a9b      	ldrh	r3, [r3, r2]
 8004378:	187a      	adds	r2, r7, r1
 800437a:	8812      	ldrh	r2, [r2, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d23d      	bcs.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004380:	f3ef 8310 	mrs	r3, PRIMASK
 8004384:	60fb      	str	r3, [r7, #12]
  return(result);
 8004386:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438a:	2301      	movs	r3, #1
 800438c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f383 8810 	msr	PRIMASK, r3
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	491a      	ldr	r1, [pc, #104]	; (800440c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80043a2:	400a      	ands	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80043b6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b8:	f3ef 8310 	mrs	r3, PRIMASK
 80043bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80043be:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2120      	movs	r1, #32
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ea:	e007      	b.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2108      	movs	r1, #8
 80043f8:	430a      	orrs	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b01e      	add	sp, #120	; 0x78
 8004402:	bd80      	pop	{r7, pc}
 8004404:	fffffeff 	.word	0xfffffeff
 8004408:	effffffe 	.word	0xeffffffe
 800440c:	efffffff 	.word	0xefffffff
 8004410:	08003ce1 	.word	0x08003ce1

08004414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	5c9b      	ldrb	r3, [r3, r2]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UARTEx_DisableFifoMode+0x16>
 8004456:	2302      	movs	r3, #2
 8004458:	e027      	b.n	80044aa <HAL_UARTEx_DisableFifoMode+0x66>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2280      	movs	r2, #128	; 0x80
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2284      	movs	r2, #132	; 0x84
 8004466:	2124      	movs	r1, #36	; 0x24
 8004468:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	438a      	bics	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004486:	4013      	ands	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2284      	movs	r2, #132	; 0x84
 800449c:	2120      	movs	r1, #32
 800449e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b004      	add	sp, #16
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	dfffffff 	.word	0xdfffffff

080044b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	5c9b      	ldrb	r3, [r3, r2]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e02e      	b.n	800452e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2280      	movs	r2, #128	; 0x80
 80044d4:	2101      	movs	r1, #1
 80044d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2284      	movs	r2, #132	; 0x84
 80044dc:	2124      	movs	r1, #36	; 0x24
 80044de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	438a      	bics	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	08d9      	lsrs	r1, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 f854 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2284      	movs	r2, #132	; 0x84
 8004520:	2120      	movs	r1, #32
 8004522:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	5c9b      	ldrb	r3, [r3, r2]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e02f      	b.n	80045b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2284      	movs	r2, #132	; 0x84
 800455c:	2124      	movs	r1, #36	; 0x24
 800455e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2101      	movs	r1, #1
 8004574:	438a      	bics	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004580:	4013      	ands	r3, r2
 8004582:	0019      	movs	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 f813 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2284      	movs	r2, #132	; 0x84
 80045a2:	2120      	movs	r1, #32
 80045a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	f1ffffff 	.word	0xf1ffffff

080045bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	226a      	movs	r2, #106	; 0x6a
 80045d0:	2101      	movs	r1, #1
 80045d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2268      	movs	r2, #104	; 0x68
 80045d8:	2101      	movs	r1, #1
 80045da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045dc:	e043      	b.n	8004666 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045de:	260f      	movs	r6, #15
 80045e0:	19bb      	adds	r3, r7, r6
 80045e2:	2208      	movs	r2, #8
 80045e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045e6:	200e      	movs	r0, #14
 80045e8:	183b      	adds	r3, r7, r0
 80045ea:	2208      	movs	r2, #8
 80045ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	0e5b      	lsrs	r3, r3, #25
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	240d      	movs	r4, #13
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	2107      	movs	r1, #7
 80045fe:	400a      	ands	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	0f5b      	lsrs	r3, r3, #29
 800460a:	b2da      	uxtb	r2, r3
 800460c:	250c      	movs	r5, #12
 800460e:	197b      	adds	r3, r7, r5
 8004610:	2107      	movs	r1, #7
 8004612:	400a      	ands	r2, r1
 8004614:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004616:	183b      	adds	r3, r7, r0
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	197a      	adds	r2, r7, r5
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	4914      	ldr	r1, [pc, #80]	; (8004670 <UARTEx_SetNbDataToProcess+0xb4>)
 8004620:	5c8a      	ldrb	r2, [r1, r2]
 8004622:	435a      	muls	r2, r3
 8004624:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004626:	197b      	adds	r3, r7, r5
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <UARTEx_SetNbDataToProcess+0xb8>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800462e:	0019      	movs	r1, r3
 8004630:	f7fb fdf2 	bl	8000218 <__divsi3>
 8004634:	0003      	movs	r3, r0
 8004636:	b299      	uxth	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	226a      	movs	r2, #106	; 0x6a
 800463c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800463e:	19bb      	adds	r3, r7, r6
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	193a      	adds	r2, r7, r4
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <UARTEx_SetNbDataToProcess+0xb4>)
 8004648:	5c8a      	ldrb	r2, [r1, r2]
 800464a:	435a      	muls	r2, r3
 800464c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800464e:	193b      	adds	r3, r7, r4
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <UARTEx_SetNbDataToProcess+0xb8>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004656:	0019      	movs	r1, r3
 8004658:	f7fb fdde 	bl	8000218 <__divsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	b299      	uxth	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2268      	movs	r2, #104	; 0x68
 8004664:	5299      	strh	r1, [r3, r2]
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b005      	add	sp, #20
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	08004760 	.word	0x08004760
 8004674:	08004768 	.word	0x08004768

08004678 <__libc_init_array>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	2600      	movs	r6, #0
 800467c:	4d0c      	ldr	r5, [pc, #48]	; (80046b0 <__libc_init_array+0x38>)
 800467e:	4c0d      	ldr	r4, [pc, #52]	; (80046b4 <__libc_init_array+0x3c>)
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	42a6      	cmp	r6, r4
 8004686:	d109      	bne.n	800469c <__libc_init_array+0x24>
 8004688:	2600      	movs	r6, #0
 800468a:	f000 f821 	bl	80046d0 <_init>
 800468e:	4d0a      	ldr	r5, [pc, #40]	; (80046b8 <__libc_init_array+0x40>)
 8004690:	4c0a      	ldr	r4, [pc, #40]	; (80046bc <__libc_init_array+0x44>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	42a6      	cmp	r6, r4
 8004698:	d105      	bne.n	80046a6 <__libc_init_array+0x2e>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	00b3      	lsls	r3, r6, #2
 800469e:	58eb      	ldr	r3, [r5, r3]
 80046a0:	4798      	blx	r3
 80046a2:	3601      	adds	r6, #1
 80046a4:	e7ee      	b.n	8004684 <__libc_init_array+0xc>
 80046a6:	00b3      	lsls	r3, r6, #2
 80046a8:	58eb      	ldr	r3, [r5, r3]
 80046aa:	4798      	blx	r3
 80046ac:	3601      	adds	r6, #1
 80046ae:	e7f2      	b.n	8004696 <__libc_init_array+0x1e>
 80046b0:	08004778 	.word	0x08004778
 80046b4:	08004778 	.word	0x08004778
 80046b8:	08004778 	.word	0x08004778
 80046bc:	0800477c 	.word	0x0800477c

080046c0 <memset>:
 80046c0:	0003      	movs	r3, r0
 80046c2:	1882      	adds	r2, r0, r2
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	7019      	strb	r1, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <_init>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr

080046dc <_fini>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr
